/// <reference types="node" />

import { ClientOptions } from '@azure-rest/core-client';
import { HttpHeaders } from '@azure/core-rest-pipeline';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PipelineRequest } from '@azure/core-rest-pipeline';
import { PipelineResponse } from '@azure/core-rest-pipeline';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Represents an Amazon Device Messaging (ADM) based installation.
 */
declare interface AdmInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "adm";
}

/**
 * Represents an Amazon Device Messaging (ADM) push notification.
 */
declare interface AdmNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "adm";
}

/**
 * Describes an ADM Registration channel query.
 */
declare interface AdmRegistrationChannel {
    /**
     * The ADM Registration ID.
     */
    admRegistrationId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "adm";
}

/**
 * Represents the description of the Amazon Device Messaging (ADM) registration.
 */
declare interface AdmRegistrationDescription extends AdmRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Adm";
}

declare interface AdmRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The Amazon Device Messaging registration identifier.
     */
    admRegistrationId: string;
}

/**
 * Represents the description of the Amazon Device Messaging (ADM) template registration.
 */
declare interface AdmTemplateRegistrationDescription extends AdmTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "AdmTemplate";
}

/**
 * Represents the description of the Amazon Device Messaging (ADM) template registration.
 */
declare interface AdmTemplateRegistrationDescriptionCommon extends AdmRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Represents an Apple APNs based installation.
 */
declare interface AppleInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "apns";
}

/**
 * Represents an Apple APNs push notification.
 */
declare interface AppleNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "apple";
}

/**
 * Describes an Apple Registration channel query.
 */
declare interface AppleRegistrationChannel {
    /**
     * The APNs device token.
     */
    deviceToken: string;
    /**
     * The kind of the registration channel.
     */
    kind: "apple";
}

/**
 * Represents the description of apple registration.
 */
declare interface AppleRegistrationDescription extends AppleRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Apple";
}

/**
 * Represents the description of apple registration.
 */
declare interface AppleRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The APNs device token.
     */
    deviceToken: string;
}

/**
 * Represents the description of the Apple template registration.
 */
declare interface AppleTemplateRegistrationDescription extends AppleTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "AppleTemplate";
}

/**
 * Represents the description of the Apple template registration.
 */
declare interface AppleTemplateRegistrationDescriptionCommon extends AppleRegistrationDescriptionCommon, TemplateRegistrationDescription {
    /**
     * The expiry date.
     */
    expiry?: Date;
    /**
     * The notification priority.
     */
    priority?: "10" | "5";
    /**
     * The APNS headers.
     */
    apnsHeaders?: Record<string, string>;
}

/**
 * Represents a Baidu based installation.
 */
declare interface BaiduInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "baidu";
}

/**
 * Represents a Baidu push notification.
 */
declare interface BaiduNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "baidu";
}

/**
 * Describes an Baidu Registration channel query.
 */
declare interface BaiduRegistrationChannel {
    /**
     * The Baidu Channel ID.
     */
    baiduChannelId: string;
    /**
     * The Baidu User ID.
     */
    baiduUserId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "baidu";
}

/**
 * Represents a Baidu registration description.
 */
declare interface BaiduRegistrationDescription extends BaiduRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Baidu";
}

declare interface BaiduRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The Baidu user identifier.
     */
    baiduUserId: string;
    /**
     * The Baidu channel identifier.
     */
    baiduChannelId: string;
}

/**
 * Represents a Baidu template registration description.
 */
declare interface BaiduTemplateRegistrationDescription extends BaiduTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "BaiduTemplate";
}

/**
 * Represents a Baidu template registration description.
 */
declare interface BaiduTemplateRegistrationDescriptionCommon extends BaiduRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Submits a Notification Hub job and creates a poller to poll for results.
 * @param context - The Notification Hubs client.
 * @param notificationHubJob - The Notification Hub import/export job to start.
 * @param options - The operation options.
 * @returns A poller which can be called to poll until completion of the job.
 */
export declare function beginSubmitNotificationHubJob(context: NotificationHubsClientContext, notificationHubJob: NotificationHubJob, polledOperationOptions?: PolledOperationOptions): Promise<NotificationHubJobPoller>;

/**
 * Represents a Browser/Web Push based installation.
 */
declare interface BrowserInstallation extends BrowserInstallationCommon {
    /**
     * The platform for the installation.
     */
    platform: "browser";
}

/**
 * Represents a Browser/Web Push based installation.
 */
declare interface BrowserInstallationCommon extends InstallationCommon {
    /**
     * The push channel for the Web Push API.
     */
    pushChannel: BrowserPushChannel;
}

/**
 * Represents a Browser push notification.
 */
declare interface BrowserNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "browser";
}

/**
 * Represents the push channel for a Browser Push installation.
 */
declare interface BrowserPushChannel {
    /**
     * The P256DH for the browser push installation.
     */
    p256dh: string;
    /**
     * The auth secret for the browser push installation.
     */
    auth: string;
    /**
     * The endpoint URL for the browser push installation.
     */
    endpoint: string;
}

/**
 * Describes an Browser Registration channel query.
 */
declare interface BrowserRegistrationChannel {
    /**
     * The Web Push endpoint URL.
     */
    endpoint: string;
    /**
     * The Web Push subscription P256DH.
     */
    p256dh: string;
    /**
     * The Web Push subscription auth secret.
     */
    auth: string;
    /**
     * The kind of the registration channel.
     */
    kind: "browser";
}

/**
 * Represents a Browser Push registration description.
 */
declare interface BrowserRegistrationDescription extends BrowserRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Browser";
}

/**
 * Represents a Browser Push registration description.
 */
declare interface BrowserRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The Browser push endpoint.
     */
    endpoint: string;
    /**
     * The Browser push P256DH.
     */
    p256dh: string;
    /**
     * The Browser push auth secret.
     */
    auth: string;
}

/**
 * Represents a Browser Push remplate registration description.
 */
declare interface BrowserTemplateRegistrationDescription extends BrowserTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "BrowserTemplate";
}

/**
 * Represents a Browser Push remplate registration description.
 */
declare interface BrowserTemplateRegistrationDescriptionCommon extends BrowserRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Cancels the scheduled notification with the given notification ID.
 * NOTE: This is only available in Standard SKU Azure Notification Hubs.
 * @param context - The Notification Hubs client.
 * @param notificationId - The notification ID from the scheduled notification.
 * @param options - The operation options.
 * @returns A notification hub response with correlation ID and tracking ID.
 */
export declare function cancelScheduledNotification(context: NotificationHubsClientContext, notificationId: string, options?: OperationOptions): Promise<NotificationHubsResponse>;

/**
 * Creates a NotificationHubClient from the Access Policy connection string and hub name.
 * @param connectionString - The Access Policy connection string for the notification hub.
 * @param hubName - The notification hub name.
 * @returns A NotificationHubsClientContext initialized from the connection string and hub name.
 */
export declare function createClientContext(connectionString: string, hubName: string, options?: NotificationHubsClientOptions): NotificationHubsClientContext;

/**
 * Creates or overwrites an installation to a Notification Hub.
 * @param context - The Notification Hubs client.
 * @param installation - The installation to create or overwrite.
 * @param options - Configuration options for the create or update installation operation.
 * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
 */
export declare function createOrUpdateInstallation(context: NotificationHubsClientContext, installation: Installation, options?: OperationOptions): Promise<NotificationHubsResponse>;

/**
 * Creates or updates a registration.
 * @param context - The Notification Hubs client.
 * @param registration - The registration to create or update.
 * @param options - The operation options.
 * @returns The created or updated registration description.
 */
export declare function createOrUpdateRegistration(context: NotificationHubsClientContext, registration: RegistrationDescription, options?: OperationOptions): Promise<RegistrationDescription>;

/**
 * Creates a new registration. This method generates a registration ID,
 * which you can subsequently use to retrieve, update, and delete this registration.
 * @param context - The Notification Hubs client.
 * @param registration - The registration to create.
 * @param options - Options for creating a new registration.
 * @returns The newly created registration description.
 */
export declare function createRegistration(context: NotificationHubsClientContext, registration: RegistrationDescription, options?: OperationOptions): Promise<RegistrationDescription>;

/**
 * Creates a new registration ID.
 * @param context - The Notification Hubs client.
 * @param options - The options for creating a new registration ID.
 * @returns The newly created registration ID.
 */
export declare function createRegistrationId(context: NotificationHubsClientContext, options?: OperationOptions): Promise<string>;

/**
 * Deletes an installation from a Notification Hub.
 * @param context - The Notification Hubs client.
 * @param installationId - The installation ID of the installation to delete.
 * @param options - Configuration options for the installation delete operation.
 * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
 */
export declare function deleteInstallation(context: NotificationHubsClientContext, installationId: string, options?: OperationOptions): Promise<NotificationHubsResponse>;

/**
 * Deletes a registration with the given registration ID.
 * @param context - The Notification Hubs client.
 * @param registrationId - The registration ID of the registration to delete.
 * @param options - The options for delete operations including the ETag
 * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
 */
export declare function deleteRegistration(context: NotificationHubsClientContext, registrationId: string, options?: EntityOperationOptions): Promise<NotificationHubsResponse>;

/**
 * Represents an installation with a string based device token.
 */
declare interface DeviceTokenInstallation extends InstallationCommon {
    /**
     * The push channel for a device.
     */
    pushChannel: string;
}

/**
 * Options for sending notifications to individual devices.
 */
declare interface DirectSendNotificationOptions extends OperationOptions {
    /**
     * The device handle to send the notification. If an array is provided, this uses batch direct send which is only available in Standard SKU and above.
     */
    deviceHandle: string | BrowserPushChannel | string[];
}

/**
 * Represents entity update operation options that can be set.
 */
declare interface EntityOperationOptions extends OperationOptions {
    /**
     * ETag as returned by creation, update, and retrieval, or ‘*’ (overwrite).
     */
    etag?: string;
}

/**
 * Represents a Firebase Legacy HTTP installation.
 */
declare interface FcmLegacyInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "gcm";
}

/**
 * Represents a Firebase legacy HTTP push notification.
 */
declare interface FcmLegacyNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "gcm";
}

/**
 * Represents an Firebase V1 Cloud Messaging based installation.
 */
declare interface FcmV1Installation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "fcmv1";
}

/**
 * Represents an Firebase V1 API notification that can be sent to a device.
 */
declare interface FcmV1Notification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "fcmv1";
}

/**
 * Represents Notification Hub registration description for Google Cloud Messaging.
 */
declare interface FcmV1RegistrationDescription extends FcmV1RegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "FcmV1";
}

/**
 * Represents Notification Hub registration description for Google Cloud Messaging.
 */
declare interface FcmV1RegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * Registration id obtained from the Firebase Cloud Messaging service.
     */
    fcmV1RegistrationId: string;
}

/**
 * Represents Notification Hub template registration description for Firebase V1 Cloud Messaging.
 */
declare interface FcmV1TemplateRegistrationDescription extends FcmV1TemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "FcmV1Template";
}

/**
 * Represents Notification Hub template registration description for Firebase V1 Cloud Messaging.
 */
declare interface FcmV1TemplateRegistrationDescriptionCommon extends FcmV1RegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Describes an Firebase Legacy Registration channel query.
 */
declare interface FirebaseLegacyRegistrationChannel {
    /**
     * The FCM Legacy registration ID.
     */
    gcmRegistrationId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "gcm";
}

/**
 * Describes an Firebase Legacy Registration channel query.
 */
declare interface FirebaseV1RegistrationChannel {
    /**
     * The FCM V1 registration ID.
     */
    fcmV1RegistrationId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "fcmv1";
}

/**
 * Represents Notification Hub registration description for Google Cloud Messaging.
 */
declare interface GcmRegistrationDescription extends GcmRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Gcm";
}

/**
 * Represents Notification Hub registration description for Google Cloud Messaging.
 */
declare interface GcmRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * Registration id obtained from the Google Cloud Messaging service.
     */
    gcmRegistrationId: string;
}

/**
 * Represents Notification Hub template registration description for Firebase Legacy Cloud Messaging.
 */
declare interface GcmTemplateRegistrationDescription extends GcmTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "GcmTemplate";
}

/**
 * Represents Notification Hub template registration description for Firebase Legacy Cloud Messaging.
 */
declare interface GcmTemplateRegistrationDescriptionCommon extends GcmRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Retrieves an Azure Storage container URL. The container has feedback data for the notification hub.
 * The caller can then use the Azure Storage Services SDK to retrieve the contents of the container.
 * @param context - The Notification Hubs client.
 * @param options - The options for getting the push notification feedback container URL.
 * @returns The URL of the Azure Storage Container containing the feedback data.
 */
export declare function getFeedbackContainerUrl(context: NotificationHubsClientContext, options?: OperationOptions): Promise<string>;

/**
 * Gets an Azure Notification Hub installation by the installation ID.
 * @param context - The Notification Hubs client.
 * @param installationId - The ID of the installation to get.
 * @param options - Configuration options for the get installation operation.
 * @returns The installation that matches the installation ID.
 */
export declare function getInstallation(context: NotificationHubsClientContext, installationId: string, options?: OperationOptions): Promise<Installation>;

/**
 * Gets a Notification Hub Job by the ID.
 * @param context - The Notification Hubs client.
 * @param jobId - The Notification Hub Job ID.
 * @param options - The operation options.
 * @returns The Notification Hub Job with the matching ID.
 */
export declare function getNotificationHubJob(context: NotificationHubsClientContext, jobId: string, options?: OperationOptions): Promise<NotificationHubJob>;

/**
 * Retrieves the results of a send operation. This can retrieve intermediate results if the send is being processed
 * or final results if the Send* has completed. This API can only be called for Standard SKU and above.
 * @param context - The Notification Hubs client.
 * @param notificationId - The notification ID returned from the send operation.
 * @param options - The operation options.
 * @returns The results of the send operation.
 */
export declare function getNotificationOutcomeDetails(context: NotificationHubsClientContext, notificationId: string, options?: OperationOptions): Promise<NotificationDetails>;

/**
 * Gets a registration by the given registration ID.
 * @param context - The Notification Hubs client.
 * @param registrationId - The ID of the registration to get.
 * @param options - The options for getting a registration by ID.
 * @returns A RegistrationDescription that has the given registration ID.
 */
export declare function getRegistration(context: NotificationHubsClientContext, registrationId: string, options?: OperationOptions): Promise<RegistrationDescription>;

/**
 * Represents the types of installations available in Notification Hubs.
 */
declare type Installation = AppleInstallation | AdmInstallation | BaiduInstallation | BrowserInstallation | FcmLegacyInstallation | FcmV1Installation | XiaomiInstallation | WindowsInstallation;

/**
 * Represents an installation for a device for Notification Hubs.
 */
declare interface InstallationCommon {
    /**
     * The ID for the installation.
     */
    installationId: string;
    /**
     * The User ID for the installation used for targeting.
     */
    userId?: string;
    /**
     * The installation expiration time.
     */
    readonly expirationTime?: string;
    /**
     * The last update date of the installation.
     */
    readonly lastUpdate?: string;
    /**
     * The tags used for targeting this installation.
     */
    tags?: string[];
    /**
     * The templates for the installation.
     */
    templates?: Record<string, InstallationTemplate>;
}

/**
 * Represents an installation template.
 */
declare interface InstallationTemplate {
    /**
     * The body for the installation template.
     */
    body: string;
    /**
     * Headers to include for the template send.
     */
    headers: Record<string, string>;
    /**
     * The tags to include for the template.
     */
    tags?: string[];
}

/**
 * Represents a JSON notification hub.
 */
declare interface JsonNotification extends NotificationCommon {
    /**
     * The content type for the push notification.
     */
    contentType: "application/json;charset=utf-8";
}

/**
 * Represents a patch operation.
 */
declare interface JsonPatch {
    /**
     * The patch operation.
     */
    op: JsonPatchOperation;
    /**
     * The path for the patch operation.
     */
    path: string;
    /**
     * The value to add or replace for the operation.
     */
    value?: string;
}

/**
 * Represents the JSON Patch types of add, remove and replace.
 */
declare type JsonPatchOperation = "add" | "remove" | "replace";

/**
 * Gets all Notification Hub Jobs for this Notification Hub.
 * @param context - The Notification Hubs client.xs
 * @param options - The operation options.
 * @returns An array of all Notification Hub Jobs for this Notification Hub.
 */
export declare function listNotificationHubJobs(context: NotificationHubsClientContext, options?: OperationOptions): Promise<NotificationHubJob[]>;

/**
 * Gets all registrations for the notification hub with the given query options.
 * @param context - The Notification Hubs client.
 * @param options - The options for querying the registrations such as $top.
 * @returns A paged async iterable containing all of the registrations for the notification hub.
 */
export declare function listRegistrations(context: NotificationHubsClientContext, options?: RegistrationQueryLimitOptions): PagedAsyncIterableIterator<RegistrationDescription>;

/**
 * Gets all registrations for the notification hub with the given device information and options.
 * @param context - The Notification Hubs client.
 * @param channel - The Registration channel information to query per PNS type.
 * @param options - The options for querying the registrations such as $top.
 * @returns A paged async iterable containing all of the registrations for the notification hub.
 */
export declare function listRegistrationsByChannel(context: NotificationHubsClientContext, channel: RegistrationChannel, options?: RegistrationQueryLimitOptions): PagedAsyncIterableIterator<RegistrationDescription>;

/**
 * Lists all registrations with the matching tag.
 * @param context - The Notification Hubs client.
 * @param tag - The tag to query for matching registrations.
 * @param options - The query options such as $top.
 * @returns A paged async iterable containing the matching registrations for the notification hub.
 */
export declare function listRegistrationsByTag(context: NotificationHubsClientContext, tag: string, options?: RegistrationQueryLimitOptions): PagedAsyncIterableIterator<RegistrationDescription>;

/**
 * Represents a Windows Phone Notification Services registration description.
 * @deprecated Windows Phone is no longer supported.
 */
declare interface MpnsRegistrationDescription extends MpnsRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Mpns";
}

/**
 * Represents a Windows Phone Notification Services registration description.
 * @deprecated Windows Phone is no longer supported.
 */
declare interface MpnsRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The channel URI.
     */
    channelUri: string;
}

/**
 * Represents a Windows Phone Notification Services template registration.
 * @deprecated Windows Phone is no longer supported.
 */
declare interface MpnsTemplateRegistrationDescription extends MpnsRegistrationDescriptionCommon, TemplateRegistrationDescription {
    /**
     * The WNS headers.
     */
    mpnsHeaders?: Record<string, string>;
    /**
     * The kind of the registration.
     */
    kind: "MpnsTemplate";
}

/**
 * Represents a Windows Phone Notification Services template registration.
 * @deprecated Windows Phone is no longer supported.
 */
declare interface MpnsTemplateRegistrationDescription extends MpnsTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "MpnsTemplate";
}

/**
 * Represents a Windows Phone Notification Services template registration.
 * @deprecated Windows Phone is no longer supported.
 */
declare interface MpnsTemplateRegistrationDescriptionCommon extends MpnsRegistrationDescriptionCommon, TemplateRegistrationDescription {
    /**
     * The WNS headers.
     */
    mpnsHeaders?: Record<string, string>;
}

/**
 * Represents the possible push notification messages types.
 */
declare type Notification = AppleNotification | AdmNotification | BaiduNotification | BrowserNotification | FcmLegacyNotification | FcmV1Notification | XiaomiNotification | WindowsNotification | TemplateNotification;

/**
 * Represents a notification that can be sent to a device.
 */
declare interface NotificationCommon {
    /**
     * The body for the push notification.
     */
    body: string;
    /**
     * The headers to include for the push notification.
     */
    headers?: Record<string, unknown>;
}

/**
 * Represents Notification details.
 */
declare interface NotificationDetails {
    /**
     * The unique notification identifier.
     */
    notificationId?: string;
    /**
     * The notification location.
     */
    location?: string;
    /**
     * The notification state.
     */
    state?: NotificationOutcomeState;
    /**
     * The enqueue time of the notification.
     */
    enqueueTime?: Date;
    /**
     * The notification send start time.
     */
    startTime?: Date;
    /**
     * The notification send end time.
     */
    endTime?: Date;
    /**
     * The notification body.
     */
    notificationBody?: string;
    /**
     * The notification tags.
     */
    tags?: string;
    /**
     * The notification platforms targeted.
     */
    targetPlatforms?: string;
    /**
     * The URL for the platform notification services errors.
     */
    pnsErrorDetailsUrl?: string;
    /**
     * APNs outcomes counts per state.
     */
    apnsOutcomeCounts?: NotificationOutcome[];
    /**
     * WNS outcomes counts per state.
     */
    wnsOutcomeCounts?: NotificationOutcome[];
    /**
     * FCM outcome counts per state.
     */
    fcmOutcomeCounts?: NotificationOutcome[];
    /**
     * FCM V1 outcome counts per state.
     */
    fcmV1OutcomeCounts?: NotificationOutcome[];
    /**
     * ADM outcome counts per state.
     */
    admOutcomeCounts?: NotificationOutcome[];
    /**
     * Baidu outcome counts per state.
     */
    baiduOutcomeCounts?: NotificationOutcome[];
    /**
     * Web Push outcome counts per state.
     */
    browserOutcomeCounts?: NotificationOutcome[];
    /**
     * Xiaomi outcome counts per state.
     */
    xiaomiOutcomeCounts?: NotificationOutcome[];
}

/**
 * Represents a Notification Hub Job.
 */
declare interface NotificationHubJob {
    /**
     * The unique job identifier.
     */
    jobId?: string;
    /**
     * The output file name.
     */
    outputFileName?: string;
    /**
     * The file name for the job failures.
     */
    failuresFileName?: string;
    /**
     * The progress for the job.
     */
    progress?: number;
    /**
     * The type of job.
     */
    type: NotificationHubJobType;
    /**
     * The status of the job.
     */
    status?: NotificationHubJobStatus;
    /**
     * The output container URL.
     */
    outputContainerUrl: string;
    /**
     * The import file URL.
     */
    importFileUrl?: string;
    /**
     * The input properties for the notification hub job.
     */
    inputProperties?: Record<string, string>;
    /**
     * Gets the notification hub job failure message.
     */
    failure?: string;
    /**
     * The output properties for the notification hub job.
     */
    outputProperties?: Record<string, string>;
    /**
     * Notification hub job created date.
     */
    createdAt?: Date;
    /**
     * Notification hub job last updated date.
     */
    updatedAt?: Date;
}

/**
 * Describes a poller for NotificationHubJob types.
 */
declare type NotificationHubJobPoller = SimplePollerLike<OperationState<NotificationHubJob>, NotificationHubJob>;

/**
 * Describes the types of notification hub job statuses.
 */
declare type NotificationHubJobStatus = 
/**
* Indicates that the NotificationHubJob was accepted.
*/
"Started"
/**
* Indicates that the NotificationHubJob is currently running. Depending on the amount of data,
* a job may stay in this state for several hours.
*/
| "Running"
/**
* Indicates that the NotificationHubJob was completed successfully. Any output
* will be ready where configured via the NotificationHubJob object.
*/
| "Completed"
/**
* Indicates that the NotificationHubJob has failed.
*/
| "Failed";

/**
 * Describes the types of notification hub jobs.
 */
declare type NotificationHubJobType = 
/**
* Job type to bulk get registrations.
*/
"ExportRegistrations"
/**
* Job type to bulk create registrations.
*/
| "ImportCreateRegistrations"
/**
* Job type to bulk update registrations.
*/
| "ImportUpdateRegistrations"
/**
* Job type to bulk delete registrations.
*/
| "ImportDeleteRegistrations"
/**
* Job type to bulk upsert registrations.
*/
| "ImportUpsertRegistrations";

/**
 * Represents the Notification Hubs SDK client context.
 */
export declare interface NotificationHubsClientContext {
    /* Excluded from this release type: sendRequest */
    /* Excluded from this release type: createHeaders */
    /* Excluded from this release type: requestUrl */
}

/**
 * Describes the options that can be provided while creating the NotificationHubsClientContext.
 */
declare interface NotificationHubsClientOptions extends ClientOptions {
}

/**
 * Describes a response from the Notification Hubs service for send operations.
 */
declare interface NotificationHubsMessageResponse extends NotificationHubsResponse {
    /**
     * The notification ID from the operation.  Note this is only available in Standard SKU and above.
     */
    notificationId?: string;
    /**
     * The number of devices that successfully received the notification.
     */
    successCount: number;
    /**
     * The number of devices that failed to receive a notification.
     */
    failureCount: number;
    /**
     * The list of notification outcome results for each device registered with the hub, to which this notification was sent.
     */
    results: RegistrationResult[];
    /**
     * The state of this notification outcome.
     */
    state: NotificationOutcomeState;
}

/**
 * Describes a response from the Notification Hubs which includes a tracking ID, correlation ID and location.
 */
declare interface NotificationHubsResponse {
    /**
     * The Tracking ID of the operation.
     */
    trackingId?: string;
    /**
     * The correlation ID of the operation.
     */
    correlationId?: string;
    /**
     * The location of the operation.
     */
    location?: string;
}

/**
 * The per platform count per state.
 */
declare interface NotificationOutcome {
    /**
     * The state of the notification.
     */
    state: string;
    /**
     * The count of notifications per state.
     */
    count: number;
}

/**
 * Represents the notification outcome states.
 */
declare type NotificationOutcomeState = "Enqueued" | "DetailedStateAvailable" | "Processing" | "Completed" | "Abandoned" | "Unknown" | "NoTargetFound" | "Cancelled";

/**
 * Options for polled operations including the polling interval cycle.
 */
declare interface PolledOperationOptions extends OperationOptions {
    /**
     * Time delay between poll requests, in milliseconds.
     */
    updateIntervalInMs?: number;
}

/**
 * Describes a Registration query.
 */
declare type RegistrationChannel = AdmRegistrationChannel | AppleRegistrationChannel | BaiduRegistrationChannel | BrowserRegistrationChannel | FirebaseLegacyRegistrationChannel | FirebaseV1RegistrationChannel | XiaomiRegistrationChannel | WindowsRegistrationChannel;

/**
 * Describes the types of registration descriptions.
 */
declare type RegistrationDescription = AdmRegistrationDescription | AdmTemplateRegistrationDescription | AppleRegistrationDescription | AppleTemplateRegistrationDescription | BaiduRegistrationDescription | BaiduTemplateRegistrationDescription | BrowserRegistrationDescription | BrowserTemplateRegistrationDescription | GcmRegistrationDescription | GcmTemplateRegistrationDescription | FcmV1RegistrationDescription | FcmV1TemplateRegistrationDescription | MpnsRegistrationDescription | MpnsTemplateRegistrationDescription | XiaomiRegistrationDescription | XiaomiTemplateRegistrationDescription | WindowsRegistrationDescription | WindowsTemplateRegistrationDescription;

/**
 * Represents a registration description.
 */
declare interface RegistrationDescriptionCommon {
    /**
     * The registration ID.
     */
    registrationId?: string;
    /**
     * The expiration time of the registration.
     */
    expirationTime?: Date;
    /**
     * The ETag associated with this description.
     */
    etag?: string;
    /**
     * The tags associated with the registration.
     */
    tags?: string[];
    /**
     * A dictionary of push variables associated with property bag.
     */
    pushVariables?: Record<string, string>;
}

/**
 * Represents query options to include $top support.
 */
declare interface RegistrationQueryLimitOptions extends OperationOptions {
    /**
     * The $top query member to get a number of records.
     */
    top?: number;
}

/**
 * Represents the result of the registration.
 */
declare interface RegistrationResult {
    /**
     * The application platform.
     */
    applicationPlatform: string;
    /**
     * The PNS handle.
     */
    pnsHandle: string;
    /**
     * The registration ID.
     */
    registrationId: string;
    /**
     * The outcome of the registration.
     */
    outcome: string;
}

/**
 * Schedules a push notification to devices that match the given tags or tag expression at the specified time.
 * NOTE: This is only available in Standard SKU Azure Notification Hubs.
 * @param context - The Notification Hubs client.
 * @param scheduledTime - The Date to send the push notification.
 * @param notification - The notification to send to the matching devices.
 * @param options - Options which include tags used to target the device for push notifications in either an array or tag expression.
 * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
 */
export declare function scheduleNotification(context: NotificationHubsClientContext, scheduledTime: Date, notification: Notification, options?: ScheduleNotificationOptions): Promise<NotificationHubsMessageResponse>;

/**
 * Options for sending notifications for both tag based send and broadcast scheduled send.
 */
declare interface ScheduleNotificationOptions extends OperationOptions {
    /**
     * A tag expression used to target devices. Use the `createTagExpression` function to create a tag expression from an array of tags.
     * If not set, this results in a broadcast notification to be scheduled.
     */
    tagExpression?: string;
}

/**
 * Sends push notifications to devices that match the given tags or tag expression.
 * @param context - The Notification Hubs client.
 * @param notification - The notification to send to the matching devices.
 * @param options - Options for the notification including tags, device handles and whether to enable test send.
 * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
 */
export declare function sendNotification(context: NotificationHubsClientContext, notification: Notification, options?: DirectSendNotificationOptions | SendNotificationOptions): Promise<NotificationHubsMessageResponse>;

/**
 * Options for sending notifications for both tag based send and broadcast send.
 */
declare interface SendNotificationOptions extends OperationOptions {
    /**
     * A tag expression used to target devices. Use the `createTagExpression` function to create a tag expression from an array of tags.
     * If not set, this results in a broadcast notification to be sent.
     */
    tagExpression?: string;
    /**
     * Set to true to enable test send.
     */
    enableTestSend?: boolean;
}

/**
 * Submits a Notification Hub Job.
 * Note: this is available to Standard SKU namespace and above.
 * @param context - The Notification Hubs client.
 * @param job - The notification hub job to submit.
 * @param options - The operation options.
 * @returns The notification hub job details including job ID and status.
 */
export declare function submitNotificationHubJob(context: NotificationHubsClientContext, job: NotificationHubJob, options?: OperationOptions): Promise<NotificationHubJob>;

/**
 * Represents a template based push notification.
 */
declare interface TemplateNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "template";
}

/**
 * Represents the description of a template registration.
 */
declare interface TemplateRegistrationDescription {
    /**
     * The body template.
     */
    bodyTemplate: string;
    /**
     * The name of the template.
     */
    templateName?: string;
}

/**
 * Updates an installation using the JSON-Patch standard in RFC6902.
 * @param context - The Notification Hubs client.
 * @param installationId - The ID of the installation to update.
 * @param installationPatches - An array of patches following the JSON-Patch standard.
 * @param options - Configuration options for the patch installation operation.
 * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
 */
export declare function updateInstallation(context: NotificationHubsClientContext, installationId: string, installationPatches: JsonPatch[], options?: OperationOptions): Promise<NotificationHubsResponse>;

/**
 * Updates an existing registration.
 * @param context - The Notification Hubs client.
 * @param registration - The registration to update.
 * @param options - The operation options.
 * @returns The updated registration description.
 */
export declare function updateRegistration(context: NotificationHubsClientContext, registration: RegistrationDescription, options?: OperationOptions): Promise<RegistrationDescription>;

/**
 * Represents the possible WNS content-types.
 */
declare type WindowsContentType = "application/xml" | "application/octet-stream";

/**
 * Represents a Windows Notification Services (WNS) based installation.
 */
declare interface WindowsInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "wns";
}

/**
 * Represents a Windows Notification Services (WNS) push notification.
 */
declare interface WindowsNotification extends NotificationCommon {
    /**
     * The platform for the push notification.
     */
    platform: "windows";
    /**
     * The content type for the push notification.
     */
    contentType: WindowsContentType;
}

/**
 * Describes an Windows Notification Services Registration channel query.
 */
declare interface WindowsRegistrationChannel {
    /**
     * The WNS Channel URI.
     */
    channelUri: string;
    /**
     * The kind of the registration channel.
     */
    kind: "windows";
}

/**
 * Represents a Windows Notification Services (WNS) registration description.
 */
declare interface WindowsRegistrationDescription extends WindowsRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Windows";
}

/**
 * Represents a Windows Notification Services (WNS) registration description.
 */
declare interface WindowsRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The channel URI.
     */
    channelUri: string;
}

/**
 * Represents a Windows Notification Services (WNS) template registration.
 */
declare interface WindowsTemplateRegistrationDescription extends WindowsTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "WindowsTemplate";
}

/**
 * Represents a Windows Notification Services (WNS) template registration.
 */
declare interface WindowsTemplateRegistrationDescriptionCommon extends WindowsRegistrationDescriptionCommon, TemplateRegistrationDescription {
    /**
     * The WNS headers.
     */
    wnsHeaders?: Record<string, string>;
}

/**
 * Represents a Xiaomi based installation.
 */
declare interface XiaomiInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "xiaomi";
}

/**
 * Represents a Xiaomi push notification.
 */
declare interface XiaomiNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "xiaomi";
}

/**
 * Describes an Xiaomi Registration channel query.
 */
declare interface XiaomiRegistrationChannel {
    /**
     * The Xiaomi registration ID.
     */
    xiaomiRegistrationId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "xiaomi";
}

/**
 * Represents a Xiaomi registration description.
 */
declare interface XiaomiRegistrationDescription extends XiaomiRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Xiaomi";
}

/**
 * Represents a Xiaomi registration description.
 */
declare interface XiaomiRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The Xiaomi registration ID.
     */
    xiaomiRegistrationId: string;
}

/**
 * Represents a Windows Notification Services (WNS) template registration.
 */
declare interface XiaomiTemplateRegistrationDescription extends XiaomiTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "XiaomiTemplate";
}

/**
 * Represents a Xiaomi template registration.
 */
declare interface XiaomiTemplateRegistrationDescriptionCommon extends XiaomiRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

export { }
