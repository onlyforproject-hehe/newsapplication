import { ClientOptions } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Represents an Amazon Device Messaging (ADM) based installation.
 */
export declare interface AdmInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "adm";
}

/**
 * Represents a native ADM notification message payload.
 */
export declare interface AdmNativeMessage {
    /**
     * The notification payload to send with the message.
     */
    notification?: AdmNativeNotification;
    /**
     * The payload data to send with the message.
     */
    data?: Record<string, string>;
    /**
     * The priority of the msssage.
     */
    priority?: "normal" | "high";
    /**
     * This is an arbitrary string used to indicate that multiple messages are logically the same
     * and that ADM is allowed to drop previously enqueued messages in favor of this new one.
     */
    consolidationKey?: string;
    /**
     * The number of seconds that ADM should retain the message if the device is offline.
     */
    expiresAfter?: number;
    /**
     * This is a base-64-encoded MD5 checksum of the data parameter.
     */
    md5?: string;
}

/**
 * Describes ADM notification messages.
 */
export declare interface AdmNativeNotification {
    /**
     * The notification's title.
     */
    title?: string;
    /**
     * The notification's body text.
     */
    body?: string;
    /**
     * The notification's icon.
     */
    icon?: string;
    /**
     * The notification's icon color, expressed in #rrggbb format.
     */
    color?: string;
    /**
     * The sound to play when the device receives the notification. Supports "default" or the filename of a sound resource bundled in the app.
     */
    sound?: string;
    /**
     * Identifier used to replace existing notifications in the notification drawer.
     */
    tag?: string;
    /**
     * The action associated with a user click on the notification.
     */
    click_action?: string;
    /**
     * The key to the body string in the app's string resources to use to localize the body text to the user's current localization.
     */
    body_loc_key?: string;
    /**
     * Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization.
     */
    body_loc_args?: string[];
    /**
     * The key to the title string in the app's string resources to use to localize the title text to the user's current localization.
     */
    title_loc_key?: string;
    /**
     * Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization.
     */
    title_loc_args?: string[];
    /**
     * The notification's channel id.
     */
    channel_id?: string;
    /**
     * Sets the "ticker" text, which is sent to accessibility services.
     */
    ticker?: string;
    /**
     * When set to false or unset, the notification is automatically dismissed when the user clicks it in the panel.
     */
    sticky?: boolean;
    /**
     * Set the time that the event in the notification occurred. Must be a timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    event_time?: string;
    /**
     * Set whether or not this notification is relevant only to the current device.
     */
    local_only?: boolean;
    /**
     * Set the relative priority for this notification.
     */
    notification_priority?: number;
    /**
     * If set to true, use the Android framework's default sound for the notification.
     */
    default_sound?: boolean;
    /**
     * Set the Notification.visibility of the notification.
     */
    visibility?: number;
    /**
     * Sets the number of items this notification represents.
     */
    notification_count?: number;
    /**
     * Contains the URL of an image that is going to be displayed in a notification.
     */
    image?: string;
}

/**
 * Represents an Amazon Device Messaging (ADM) push notification.
 */
export declare interface AdmNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "adm";
}

/**
 * Represents an ADM notification that can be sent to a device.
 */
export declare interface AdmNotificationParams {
    /**
     * The body for the push notification.
     */
    body: string | AdmNativeMessage;
    /**
     * The headers to include for the push notification.
     */
    headers?: Record<string, string>;
}

/**
 * Describes an ADM Registration channel query.
 */
export declare interface AdmRegistrationChannel {
    /**
     * The ADM Registration ID.
     */
    admRegistrationId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "adm";
}

/**
 * Represents the description of the Amazon Device Messaging (ADM) registration.
 */
export declare interface AdmRegistrationDescription extends AdmRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Adm";
}

export declare interface AdmRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The Amazon Device Messaging registration identifier.
     */
    admRegistrationId: string;
}

/**
 * Represents the description of the Amazon Device Messaging (ADM) template registration.
 */
export declare interface AdmTemplateRegistrationDescription extends AdmTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "AdmTemplate";
}

/**
 * Represents the description of the Amazon Device Messaging (ADM) template registration.
 */
export declare interface AdmTemplateRegistrationDescriptionCommon extends AdmRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Describes the types of APNs pushes.
 */
export declare type ApnsPushTypes = "alert" | "background" | "voip" | "complication" | "fileprovider" | "mdm" | "location" | "liveactivity" | "pushtotalk";

/**
 * Represents what is in the APNs alert body.
 */
export declare interface AppleAlert {
    /**
     * The title of the notification. Apple Watch displays this string in the short look notification
     * interface. Specify a string that’s quickly understood by the user.
     */
    title?: string;
    /**
     * Additional information that explains the purpose of the notification.
     */
    subtitle?: string;
    /**
     * The content of the alert message.
     */
    body?: string;
    /**
     * The name of the launch image file to display. If the user chooses to launch your app,
     * the contents of the specified image or storyboard file are displayed instead of your app’s normal launch image.
     */
    "launch-image"?: string;
    /**
     * The key for a localized title string. Specify this key instead of the title key to retrieve
     * the title from your app’s Localizable.strings files. The value must contain the name of a key in your strings file.
     */
    "title-loc-key"?: string;
    /**
     * An array of strings containing replacement values for variables in your title string.
     * Each %\@ character in the string specified by the title-loc-key is replaced by a value
     * from this array. The first item in the array replaces the first instance
     * of the %\@ character in the string, the second item replaces the second instance, and so on.
     */
    "title-loc-args"?: string[];
    /**
     * The key for a localized subtitle string. Use this key, instead of the subtitle key, to
     * retrieve the subtitle from your app’s Localizable.strings file.
     * The value must contain the name of a key in your strings file.
     */
    "subtitle-loc-key"?: string;
    /**
     * An array of strings containing replacement values for variables in your title string.
     * Each %\@ character in the string specified by subtitle-loc-key is replaced by a value
     * from this array. The first item in the array replaces the first instance of the
     * %\@ character in the string, the second item replaces the second instance, and so on.
     */
    "subtitle-loc-args"?: string[];
    /**
     * The key for a localized message string. Use this key, instead of the body key, to
     * retrieve the message text from your app’s Localizable.strings file. The value must contain
     * the name of a key in your strings file.
     */
    "loc-key"?: string;
    /**
     * An array of strings containing replacement values for variables in your message text.
     * Each %\@ character in the string specified by loc-key is replaced by a value from
     * this array. The first item in the array replaces the first instance of the %\@ character
     * in the string, the second item replaces the second instance, and so on.
     */
    "loc-args"?: string[];
}

/**
 * Represents a native APNs APS message.
 */
export declare interface AppleApsNativeMessage extends Record<string, any> {
    /**
     * The information for displaying an alert.
     */
    alert?: string | AppleAlert;
    /**
     * The number to display in a badge on your app’s icon.
     */
    badge?: number;
    /**
     * The name of a sound file in your app’s main bundle or in the Library/Sounds
     * folder of your app’s container directory. Specify the string “default” to
     * play the system sound. Use this key for regular notifications.
     * For critical alerts, use the sound dictionary instead.
     */
    sound?: string | AppleCriticalSound;
    /**
     * An app-specific identifier for grouping related notifications.
     */
    "thread-id"?: string;
    /**
     * The notification’s type.
     */
    category?: string;
    /**
     * The background notification flag. To perform a silent background update,
     * specify the value 1 and don’t include the alert, badge, or sound keys in your payload.
     */
    "content-available"?: number;
    /**
     * The notification service app extension flag. If the value is 1, the system passes
     * the notification to your notification service app extension before delivery.
     */
    "mutable-content"?: number;
    /**
     * The identifier of the window brought forward.
     */
    "target-content-id"?: string;
    /**
     * The importance and delivery timing of a notification.
     */
    "interruption-level"?: "passive" | "active" | "time-sensitive" | "critical";
    /**
     * The relevance score, a number between 0 and 1, that the system uses to sort the
     * notifications from your app. The highest score gets featured in the notification summary.
     */
    "relevance-score"?: number;
    /**
     * The criteria the system evaluates to determine if it displays the notification in the current Focus.
     */
    "filter-criteria"?: string;
    /**
     * The UNIX timestamp that represents the date at which a Live Activity becomes stale, or out of date.
     */
    "stale-date"?: number;
    /**
     * The updated or final content for a Live Activity.
     */
    "content-state"?: Record<string, any>;
    /**
     * The UNIX timestamp that marks the time when you send the remote notification that updates or ends a Live Activity.
     */
    timestamp?: number;
    /**
     * The string that describes whether you update or end an ongoing Live Activity with the remote push notification. To update the Live Activity, use update. To end the Live Activity, use end.
     */
    events?: string;
    /**
     * The UNIX timestamp that represents the date at which the system ends a Live Activity and removes it from the Dynamic Island and the Lock Screen.
     */
    "dismissal-date"?: number;
}

/**
 * Represents an APNs critical sound
 */
export declare interface AppleCriticalSound {
    /**
     * The critical alert flag. Set to 1 to enable the critical alert.
     */
    critical: number;
    /**
     * The name of a sound file in your app’s main bundle or in the Library/Sounds folder
     * of your app’s container directory. Specify the string “default” to play the system sound.
     */
    name: string;
    /**
     * The volume for the critical alert’s sound. Set this to a value between 0 (silent) and 1 (full volume).
     */
    volume: number;
}

/**
 * The list of APNs specific headers.
 */
export declare interface AppleHeaders extends Record<string, unknown> {
    /**
     * The value of this header must accurately reflect the contents of your notification’s payload.
     */
    "apns-push-type"?: ApnsPushTypes;
    /**
     * A canonical UUID that’s the unique ID for the notification.
     */
    "apns-id"?: string;
    /**
     * The date at which the notification is no longer valid. This value is a UNIX epoch expressed in seconds (UTC).
     */
    "apns-expiration"?: string;
    /**
     * The priority of the notification. If you omit this header, APNs sets the notification priority to 10.
     */
    "apns-priority"?: "5" | "10";
    /**
     * The topic for the notification. In general, the topic is your app’s bundle ID/app ID.
     */
    "apns-topic"?: string;
    /**
     * An identifier you use to merge multiple notifications into a single notification for the user.
     */
    "apns-collapse-id"?: string;
}

/**
 * Represents an Apple APNs based installation.
 */
export declare interface AppleInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "apns";
}

/**
 * Represents a native APNs message.
 */
export declare interface AppleNativeMessage extends Record<string, any> {
    /**
     * The Apple specific push notification information.
     */
    aps?: AppleApsNativeMessage;
}

/**
 * Represents an Apple APNs push notification.
 */
export declare interface AppleNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "apple";
}

/**
 * Represents an Apple notification that can be sent to a device.
 */
export declare interface AppleNotificationParams {
    /**
     * The body for the push notification.
     */
    body: string | AppleNativeMessage;
    /**
     * The headers to include for the push notification.
     */
    headers?: AppleHeaders;
}

/**
 * Describes an Apple Registration channel query.
 */
export declare interface AppleRegistrationChannel {
    /**
     * The APNs device token.
     */
    deviceToken: string;
    /**
     * The kind of the registration channel.
     */
    kind: "apple";
}

/**
 * Represents the description of apple registration.
 */
export declare interface AppleRegistrationDescription extends AppleRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Apple";
}

/**
 * Represents the description of apple registration.
 */
export declare interface AppleRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The APNs device token.
     */
    deviceToken: string;
}

/**
 * Represents the description of the Apple template registration.
 */
export declare interface AppleTemplateRegistrationDescription extends AppleTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "AppleTemplate";
}

/**
 * Represents the description of the Apple template registration.
 */
export declare interface AppleTemplateRegistrationDescriptionCommon extends AppleRegistrationDescriptionCommon, TemplateRegistrationDescription {
    /**
     * The expiry date.
     */
    expiry?: Date;
    /**
     * The notification priority.
     */
    priority?: "10" | "5";
    /**
     * The APNS headers.
     */
    apnsHeaders?: Record<string, string>;
}

/**
 * Represents the Baidu Apple native payload.
 */
export declare interface BaiduAppleNativePayload {
    /**
     * The alert string.
     */
    alert?: string;
    /**
     * The APNs sound to play.
     */
    sound?: string;
    /**
     * The APNs badge count.
     */
    badge?: number;
}

/**
 * Represents a Baidu based installation.
 */
export declare interface BaiduInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "baidu";
}

/**
 * Baidu Native Format:
 * https://stackoverflow.com/questions/42591815/customize-baidu-push-json-payload
 * http://www.tuicool.com/articles/ZnmANn
 */
export declare interface BaiduNativeMessage extends Record<string, any> {
    /**
     * Notification title for Android.
     */
    title?: string;
    /**
     * Baidu Notification description for Android.
     */
    description?: string;
    /**
     * Baidu Notification builder ID.
     */
    notification_builder_id?: number;
    /**
     * Baidu Notification Android basic style.
     */
    notification_basic_style?: number;
    /**
     * Baidu Android open type.
     */
    open_type?: number;
    /**
     * Baidu Android net support option.
     */
    net_support?: number;
    /**
     * Baidu Android user confirm.
     */
    user_confirm?: number;
    /**
     * Baidu Android URL.
     */
    url?: string;
    /**
     * Baidu Android package content.
     */
    pkg_content?: string;
    /**
     * Baidu Android package version.
     */
    pkg_version?: string;
    /**
     * Baidu Android custom content dictionary.
     */
    custom_content?: Record<string, any>;
    /**
     * Baidu APNs support.
     */
    aps?: BaiduAppleNativePayload;
}

/**
 * Represents a Baidu push notification.
 */
export declare interface BaiduNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "baidu";
}

/**
 * Describes an Baidu Registration channel query.
 */
export declare interface BaiduRegistrationChannel {
    /**
     * The Baidu Channel ID.
     */
    baiduChannelId: string;
    /**
     * The Baidu User ID.
     */
    baiduUserId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "baidu";
}

/**
 * Represents a Baidu registration description.
 */
export declare interface BaiduRegistrationDescription extends BaiduRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Baidu";
}

export declare interface BaiduRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The Baidu user identifier.
     */
    baiduUserId: string;
    /**
     * The Baidu channel identifier.
     */
    baiduChannelId: string;
}

/**
 * Represents a Baidu template registration description.
 */
export declare interface BaiduTemplateRegistrationDescription extends BaiduTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "BaiduTemplate";
}

/**
 * Represents a Baidu template registration description.
 */
export declare interface BaiduTemplateRegistrationDescriptionCommon extends BaiduRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Represents a Browser/Web Push based installation.
 */
export declare interface BrowserInstallation extends BrowserInstallationCommon {
    /**
     * The platform for the installation.
     */
    platform: "browser";
}

/**
 * Represents a Browser/Web Push based installation.
 */
export declare interface BrowserInstallationCommon extends InstallationCommon {
    /**
     * The push channel for the Web Push API.
     */
    pushChannel: BrowserPushChannel;
}

/**
 * Represents a Browser push notification.
 */
export declare interface BrowserNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "browser";
}

/**
 * Represents the push channel for a Browser Push installation.
 */
export declare interface BrowserPushChannel {
    /**
     * The P256DH for the browser push installation.
     */
    p256dh: string;
    /**
     * The auth secret for the browser push installation.
     */
    auth: string;
    /**
     * The endpoint URL for the browser push installation.
     */
    endpoint: string;
}

/**
 * Describes an Browser Registration channel query.
 */
export declare interface BrowserRegistrationChannel {
    /**
     * The Web Push endpoint URL.
     */
    endpoint: string;
    /**
     * The Web Push subscription P256DH.
     */
    p256dh: string;
    /**
     * The Web Push subscription auth secret.
     */
    auth: string;
    /**
     * The kind of the registration channel.
     */
    kind: "browser";
}

/**
 * Represents a Browser Push registration description.
 */
export declare interface BrowserRegistrationDescription extends BrowserRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Browser";
}

/**
 * Represents a Browser Push registration description.
 */
export declare interface BrowserRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The Browser push endpoint.
     */
    endpoint: string;
    /**
     * The Browser push P256DH.
     */
    p256dh: string;
    /**
     * The Browser push auth secret.
     */
    auth: string;
}

/**
 * Represents a Browser Push remplate registration description.
 */
export declare interface BrowserTemplateRegistrationDescription extends BrowserTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "BrowserTemplate";
}

/**
 * Represents a Browser Push remplate registration description.
 */
export declare interface BrowserTemplateRegistrationDescriptionCommon extends BrowserRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Creates an Amazon Device Messaging (ADM) based installation.
 * @param installation - A partial installation used to create the ADM installation.
 * @returns The newly created ADM installation.
 */
export declare function createAdmInstallation(installation: DeviceTokenInstallation): AdmInstallation;

/**
 * Creates a notification to send to an Amazon Device Messaging device.
 * @param notification - A partial message used to create a message for Amazon Device Messaging.
 * @returns A newly created Amazon Device Messaging.
 */
export declare function createAdmNotification(notification: AdmNotificationParams): AdmNotification;

/**
 * Creates a AdmNotification from a native ADM payload.
 * @param nativeMessage - The native message payload to send to Notification Hubs.
 * @returns The AdmNotification to send to Notification Hubs.
 */
export declare function createAdmNotificationBody(nativeMessage: AdmNativeMessage): string;

/**
 * Creates an ADM registration description.
 * @param description - A partial ADM registration description.
 * @returns A created ADM registration description.
 */
export declare function createAdmRegistrationDescription(description: AdmRegistrationDescriptionCommon): AdmRegistrationDescription;

/**
 * Creates an ADM template registration description.
 * @param description - A partial ADM template registration description.
 * @returns A created ADM template registration description.
 */
export declare function createAdmTemplateRegistrationDescription(description: AdmTemplateRegistrationDescriptionCommon): AdmTemplateRegistrationDescription;

/**
 * Creates an Apple based installation.
 * @param installation - A partial installation used to create the Apple installation.
 * @returns The newly created Apple installation.
 */
export declare function createAppleInstallation(installation: DeviceTokenInstallation): AppleInstallation;

/**
 * Creates a notification to send to an Apple device.
 * @param notification - A partial message used to create a message for Apple.
 * @returns A newly created Apple.
 */
export declare function createAppleNotification(notification: AppleNotificationParams): AppleNotification;

/**
 * Creates an APNs native message to send to Notification Hubs.
 * @param nativeMessage - The Apple native message properties to set.
 * @param additionalProperties - Additional properties for Apple messages.
 * @returns An AppleNotification to send to Notification Hubs.
 */
export declare function createAppleNotificationBody(nativeMessage: AppleNativeMessage): string;

/**
 * Creates an Apple registration description.
 * @param description - A partial Apple registration description.
 * @returns A created Apple registration description.
 */
export declare function createAppleRegistrationDescription(description: AppleRegistrationDescriptionCommon): AppleRegistrationDescription;

/**
 * Creates an Apple template registration description.
 * @param description - A partial Apple template registration description.
 * @returns A created Apple template registration description.
 */
export declare function createAppleTemplateRegistrationDescription(description: AppleTemplateRegistrationDescriptionCommon): AppleTemplateRegistrationDescription;

/**
 * Creates a Baidu based installation.
 * @param installation - A partial installation used to create the Baidu installation.
 * @returns The newly created Baidu installation.
 */
export declare function createBaiduInstallation(installation: DeviceTokenInstallation): BaiduInstallation;

/**
 * Creates a notification to send to a Baidu registered device.
 * @param notification - A partial message used to create a message for Baidu.
 * @returns A newly created Baidu.
 */
export declare function createBaiduNotification(notification: NotificationCommonParams): BaiduNotification;

/**
 * Creates a BaiduNotification from a native Baidu payload.
 * @param nativeMessage - The native message payload to send to Notification Hubs.
 * @returns The JSON body to send to Notification Hubs.
 */
export declare function createBaiduNotificationBody(nativeMessage: BaiduNativeMessage): string;

/**
 * Creates a Baidu registration description.
 * @param description - A partial Baidu registration description.
 * @returns A created Baidu registration description.
 */
export declare function createBaiduRegistrationDescription(description: BaiduRegistrationDescriptionCommon): BaiduRegistrationDescription;

/**
 * Creates a Baidu template registration description.
 * @param description - A partial Baidu template registration description.
 * @returns A created Baidu template registration description.
 */
export declare function createBaiduTemplateRegistrationDescription(description: BaiduTemplateRegistrationDescriptionCommon): BaiduTemplateRegistrationDescription;

/**
 * Creates a Web Push based installation.
 * @param installation - A partial installation used to create the Web Push installation.
 * @returns The newly created Web Push installation.
 */
export declare function createBrowserInstallation(installation: BrowserInstallationCommon): BrowserInstallation;

/**
 * Creates a notification to send to a browser.
 * @param notification - A partial message used to create a message for a browser.
 * @returns A newly created Web Push browser.
 */
export declare function createBrowserNotification(notification: NotificationCommonParams): BrowserNotification;

/**
 * Creates a Web Push registration description.
 * @param description - A partial Web Push registration description.
 * @returns A created Web Push registration description.
 */
export declare function createBrowserRegistrationDescription(description: BrowserRegistrationDescriptionCommon): BrowserRegistrationDescription;

/**
 * Creates a Web Push registration description.
 * @param description - A partial Web Push template registration description.
 * @returns A created Web Push template registration description.
 */
export declare function createBrowserTemplateRegistrationDescription(description: BrowserTemplateRegistrationDescriptionCommon): BrowserTemplateRegistrationDescription;

/**
 * Creates a Firebase legacy HTTP based installation.
 * @param installation - A partial installation used to create the Firebase Legacy HTTP installation.
 * @returns The newly created Baidu installation.
 */
export declare function createFcmLegacyInstallation(installation: DeviceTokenInstallation): FcmLegacyInstallation;

/**
 * Creates a notification to send to Firebase.
 * @param notification - A partial message used to create a message for Firebase.
 * @returns A newly created Firebase notification.
 */
export declare function createFcmLegacyNotification(notification: FcmLegacyNotificationParams): FcmLegacyNotification;

/**
 * Creates a Firebase Legacy registration description.
 * @param description - A partial GCM registration description.
 * @returns A created GCM registration description.
 */
export declare function createFcmLegacyRegistrationDescription(description: GcmRegistrationDescriptionCommon): GcmRegistrationDescription;

/**
 * Creates a GCM template registration description.
 * @param description - A partial GCM template registration description.
 * @returns A created GCM template registration description.
 */
export declare function createFcmLegacyTemplateRegistrationDescription(description: GcmTemplateRegistrationDescriptionCommon): GcmTemplateRegistrationDescription;

/**
 * Creates an Firebase V1 Cloud Messaging based installation.
 * @param installation - A partial installation used to create the Firebase V1 Cloud Messaging installation.
 * @returns The newly created Firebase V1 Cloud Messaging installation.
 */
export declare function createFcmV1Installation(installation: DeviceTokenInstallation): FcmV1Installation;

/**
 * Creates a notification to send to Firebase.
 * @param notification - A partial message used to create a message for Firebase.
 * @returns A newly created Firebase notification.
 */
export declare function createFcmV1Notification(notification: FcmV1NotificationParams): FcmV1Notification;

/**
 * Creates a Firebase V1 registration description.
 * @param description - A partial FCM V1 registration description.
 * @returns A created FCM V1 registration description.
 */
export declare function createFcmV1RegistrationDescription(description: FcmV1RegistrationDescriptionCommon): FcmV1RegistrationDescription;

/**
 * Creates a FCM V1 template registration description.
 * @param description - A partial FCM V1 template registration description.
 * @returns A created FCM V1 template registration description.
 */
export declare function createFcmV1TemplateRegistrationDescription(description: FcmV1TemplateRegistrationDescriptionCommon): FcmV1TemplateRegistrationDescription;

/**
 * Creates a FcmLegacyNotification from a native Firebase payload.
 * @param nativeMessage - The native message payload to send to Notification Hubs.
 * @returns The JSON body to send to Notification Hubs.
 */
export declare function createFirebaseLegacyNotificationBody(nativeMessage: FirebaseLegacyNativeMessage): string;

/**
 * Creates a FcmV1Notification from a native Firebase payload.
 * @param nativeMessage - The native message payload to send to Notification Hubs.
 * @returns The JSON body to send to Notification Hubs.
 */
export declare function createFirebaseV1NotificationBody(nativeMessage: FirebaseV1NativeMessageEnvelope): string;

/**
 * Creates a tag expression from a list of tags as a || expression.
 * @param tags - The tags to create the || expression
 * @returns The tag expression made from the array of strings into an || expression.
 */
export declare function createTagExpression(tags: string[]): string;

/**
 * Creates a template notification.
 * @param notification - A partial message used to be used for a template notification.
 * @returns A newly created Firebase.
 */
export declare function createTemplateNotification(notification: NotificationCommonParams): TemplateNotification;

/**
 * Creates a badge message to send to WNS.
 * @param notification - A partial message used to create a badge message for WNS.
 * @returns A newly created WNS badge.
 */
export declare function createWindowsBadgeNotification(notification: WnsNotificationParams): WindowsNotification;

/**
 * Builds a WindowsNotification from a Windows Badge.
 * @param nativeMessage - The Windows Badge Message to build.
 * @returns The WNS XML created with the badge information.
 */
export declare function createWindowsBadgeNotificationBody(nativeMessage: WindowsBadgeNativeMessage): string;

/**
 * Creates a Windows Notification Services (WNS) based installation.
 * @param installation - A partial installation used to create the WNS installation.
 * @returns The newly created WNS installation.
 */
export declare function createWindowsInstallation(installation: DeviceTokenInstallation): WindowsInstallation;

/**
 * Creates a notification to send to WNS.
 * @param notification - The WNS notification to send.
 * @returns A newly created WNS message.
 */
export declare function createWindowsNotification(notification: WnsNotificationParams): WindowsNotification;

/**
 * Creates a notification to send to WNS in wns/raw format..
 * @param notification - A partial message used to create a message for WNS in XML format.
 * @returns A newly created WNS message using XML.
 */
export declare function createWindowsRawNotification(notification: WnsNotificationParams): WindowsNotification;

/**
 * Creates a Windows registration description.
 * @param description - A partial Windows registration description.
 * @returns A created Windows registration description.
 */
export declare function createWindowsRegistrationDescription(description: WindowsRegistrationDescriptionCommon): WindowsRegistrationDescription;

/**
 * Creates a Windows template registration description.
 * @param description - A partial Windows template registration description.
 * @returns A created Windows template registration description.
 */
export declare function createWindowsTemplateRegistrationDescription(description: WindowsTemplateRegistrationDescriptionCommon): WindowsTemplateRegistrationDescription;

/**
 * Creates a tile message to send to WNS.
 * @param notification - A partial message used to create a tile message for WNS.
 * @returns A newly created WNS tile.
 */
export declare function createWindowsTileNotification(notification: WnsNotificationParams): WindowsNotification;

/**
 * Creates a toast message to send to WNS.
 * @param notification - A partial message used to create a toast message for WNS.
 * @returns A newly created WNS toast.
 */
export declare function createWindowsToastNotification(notification: WnsNotificationParams): WindowsNotification;

/**
 * Creates a Xiaomi based installation.
 * @param installation - A partial installation used to create the Xiaomi installation.
 * @returns The newly created Xiaomi installation.
 */
export declare function createXiaomiInstallation(installation: DeviceTokenInstallation): XiaomiInstallation;

/**
 * Creates a notification to send to Xiaomi.
 * @param notification - A partial message used to create a message for Xiaomi.
 * @returns A newly created Xiaomi notification.
 */
export declare function createXiaomiNotification(notification: NotificationCommonParams): XiaomiNotification;

/**
 * Creates a Xiaomi registration description.
 * @param description - A partial Xiaomi registration description.
 * @returns A created Xiaomi registration description.
 */
export declare function createXiaomiRegistrationDescription(description: XiaomiRegistrationDescriptionCommon): XiaomiRegistrationDescription;

/**
 * Creates a Xiaomi template registration description.
 * @param description - A partial Xiaomi template registration description.
 * @returns A created Xiaomi template registration description.
 */
export declare function createXiaomiTemplateRegistrationDescription(description: XiaomiTemplateRegistrationDescriptionCommon): XiaomiTemplateRegistrationDescription;

/**
 * Represents an installation with a string based device token.
 */
export declare interface DeviceTokenInstallation extends InstallationCommon {
    /**
     * The push channel for a device.
     */
    pushChannel: string;
}

/**
 * Options for sending notifications to individual devices.
 */
export declare interface DirectSendNotificationOptions extends OperationOptions {
    /**
     * The device handle to send the notification. If an array is provided, this uses batch direct send which is only available in Standard SKU and above.
     */
    deviceHandle: string | BrowserPushChannel | string[];
}

/**
 * Represents entity update operation options that can be set.
 */
export declare interface EntityOperationOptions extends OperationOptions {
    /**
     * ETag as returned by creation, update, and retrieval, or ‘*’ (overwrite).
     */
    etag?: string;
}

/**
 * Represents a Firebase Legacy HTTP installation.
 */
export declare interface FcmLegacyInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "gcm";
}

/**
 * Represents a Firebase legacy HTTP push notification.
 */
export declare interface FcmLegacyNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "gcm";
}

/**
 * Represents an Firebase Legacy notification that can be sent to a device.
 */
export declare interface FcmLegacyNotificationParams {
    /**
     * The body for the push notification.
     */
    body: string | FirebaseLegacyNativeMessage;
    /**
     * The headers to include for the push notification.
     */
    headers?: Record<string, string>;
}

/**
 * Represents an Firebase V1 Cloud Messaging based installation.
 */
export declare interface FcmV1Installation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "fcmv1";
}

/**
 * Represents an Firebase V1 API notification that can be sent to a device.
 */
export declare interface FcmV1Notification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "fcmv1";
}

/**
 * Represents an Firebase V1 notification that can be sent to a device.
 */
export declare interface FcmV1NotificationParams {
    /**
     * The body for the push notification.
     */
    body: string | FirebaseV1NativeMessage;
    /**
     * The headers to include for the push notification.
     */
    headers?: Record<string, string>;
}

/**
 * Represents Notification Hub registration description for Google Cloud Messaging.
 */
export declare interface FcmV1RegistrationDescription extends FcmV1RegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "FcmV1";
}

/**
 * Represents Notification Hub registration description for Google Cloud Messaging.
 */
export declare interface FcmV1RegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * Registration id obtained from the Firebase Cloud Messaging service.
     */
    fcmV1RegistrationId: string;
}

/**
 * Represents Notification Hub template registration description for Firebase V1 Cloud Messaging.
 */
export declare interface FcmV1TemplateRegistrationDescription extends FcmV1TemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "FcmV1Template";
}

/**
 * Represents Notification Hub template registration description for Firebase V1 Cloud Messaging.
 */
export declare interface FcmV1TemplateRegistrationDescriptionCommon extends FcmV1RegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Represents an Android native payload for the Firebase Legacy HTTP interface.
 */
export declare interface FirebaseLegacyAndroidNativePayload {
    /**
     * The notification's title.
     */
    title?: string;
    /**
     * The notification's body text.
     */
    body?: string;
    /**
     * The notification's channel ID.
     */
    android_channel_id?: string;
    /**
     * The notification's icon.
     */
    icon?: string;
    /**
     * The sound to play when the device receives the notification.
     */
    sound?: string;
    /**
     * Identifier used to replace existing notifications in the notification drawer.
     */
    tag?: string;
    /**
     * The notification's icon color, expressed in #rrggbb format.
     */
    color?: string;
    /**
     * The action associated with a user click on the notification.
     */
    click_action?: string;
    /**
     * The key to the body string in the app's string resources to use to localize the body text to the user's current localization.
     */
    body_loc_key?: string;
    /**
     * Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization.
     */
    body_loc_args?: string[];
    /**
     * The key to the title string in the app's string resources to use to localize the title text to the user's current localization.
     */
    title_loc_key?: string;
    /**
     * Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization.
     */
    title_loc_args?: string[];
}

/**
 * Represents an APNs native payload for the Firebase Legacy HTTP interface.
 */
export declare interface FirebaseLegacyAppleNativePayload {
    /**
     * The notification's title.
     */
    title?: string;
    /**
     * The notification's body text.
     */
    body?: string;
    /**
     * The sound to play when the device receives the notification.
     */
    sound?: string;
    /**
     * The value of the badge on the home screen app icon.
     */
    badge?: string;
    /**
     * The action associated with a user click on the notification which corresponds to the APNs category.
     */
    click_action?: string;
    /**
     * The notification's subtitle.
     */
    subtitle?: string;
    /**
     * The key to the body string in the app's string resources to use to localize the body text to the user's current localization.
     */
    body_loc_key?: string;
    /**
     * Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization.
     */
    body_loc_args?: string[];
    /**
     * The key to the title string in the app's string resources to use to localize the title text to the user's current localization.
     */
    title_loc_key?: string;
    /**
     * Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization.
     */
    title_loc_args?: string[];
}

/**
 * Represents the targets, options, and payload for HTTP JSON messages for the Firebase Legacy HTTP interface.
 */
export declare interface FirebaseLegacyNativeMessage {
    /**
     * The recipient of a message.
     */
    to?: string;
    /**
     * The recipient of a multicast message, a message sent to more than one registration token.
     */
    registration_ids?: string[];
    /**
     * A logical expression of conditions that determine the message target.
     */
    condition?: string;
    /**
     * Used to identify a group of messages.
     */
    collapse_key?: string;
    /**
     * The priority of the message.
     */
    priority?: "normal" | "high";
    /**
     * The background notification flag. To perform a silent background update,
     * specify the value 1 and don’t include the alert, badge, or sound keys in your payload.
     */
    content_available?: boolean;
    /**
     * The notification service app extension flag. If the value is 1, the system passes
     * the notification to your notification service app extension before delivery.
     */
    mutable_content?: number;
    /**
     * Specifies how long (in seconds) the message should be kept in FCM storage if the device is offline
     */
    time_to_live?: number;
    /**
     * The package name of the application where the registration tokens must match in order to receive the message.
     */
    restricted_package_name?: string;
    /**
     * When set to true, allows developers to test a request without actually sending a message.
     */
    dry_run?: boolean;
    /**
     * Custom key-value pairs of the message's payload.
     */
    data?: Record<string, any>;
    /**
     * The predefined, user-visible key-value pairs of the notification payload.
     */
    notification?: FirebaseLegacyAppleNativePayload | FirebaseLegacyAndroidNativePayload | FirebaseLegacyWebNativePayload;
}

/**
 * Describes an Firebase Legacy Registration channel query.
 */
export declare interface FirebaseLegacyRegistrationChannel {
    /**
     * The FCM Legacy registration ID.
     */
    gcmRegistrationId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "gcm";
}

/**
 * Represents an Web Push native payload for the Firebase Legacy HTTP interface.
 */
export declare interface FirebaseLegacyWebNativePayload {
    /**
     * The notification's title.
     */
    title?: string;
    /**
     * The notification's body text.
     */
    body?: string;
    /**
     * The URL to use for the notification's icon.
     */
    icon?: string;
    /**
     * The action associated with a user click on the notification.
     */
    click_action?: string;
}

/**
 * Android specific options for messages sent through FCM connection server.
 */
export declare interface FirebaseV1AndroidConfig {
    /**
     * An identifier of a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed.
     */
    collapse_key?: string;
    /**
     * Message priority. Can take "normal" and "high" values.
     */
    priority?: "normal" | "high";
    /**
     * How long (in seconds) the message should be kept in FCM storage if the device is offline.
     */
    ttl?: string;
    /**
     * Package name of the application where the registration token must match in order to receive the message.
     */
    restricted_package_name?: string;
    /**
     * Custom key-value pairs of the message's payload.
     */
    data?: Record<string, string>;
    /**
     * Notification to send to android devices.
     */
    notification?: FirebaseV1AndroidNotification;
    /**
     * Options for features provided by the FCM SDK for Android.
     */
    fcm_options?: FirebaseV1AndroidFcmOptions;
    /**
     * If set to true, messages will be allowed to be delivered to the app while the device is in direct boot mode.
     */
    direct_boot_ok?: boolean;
}

/**
 * Options for features provided by the FCM SDK for Android.
 */
export declare interface FirebaseV1AndroidFcmOptions {
    /**
     * The label associated with the message's analytics data.
     */
    analytics_label?: string;
}

/**
 * Notification to send to android devices.
 */
export declare interface FirebaseV1AndroidNotification {
    /**
     * The notification's title.
     */
    title?: string;
    /**
     * The notification's body text.
     */
    body?: string;
    /**
     * The notification's icon.
     */
    icon?: string;
    /**
     * The notification's icon color, expressed in #rrggbb format.
     */
    color?: string;
    /**
     * The sound to play when the device receives the notification.
     */
    sound?: string;
    /**
     * Identifier used to replace existing notifications in the notification drawer.
     */
    tag?: string;
    /**
     * The action associated with a user click on the notification.
     */
    click_action?: string;
    /**
     * The key to the body string in the app's string resources to use to localize the body text to the user's current localization.
     */
    body_loc_key?: string;
    /**
     * Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization.
     */
    body_loc_args?: string[];
    /**
     * The key to the title string in the app's string resources to use to localize the title text to the user's current localization.
     */
    title_loc_key?: string;
    /**
     * Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization.
     */
    title_loc_args?: string[];
    /**
     * The notification's channel id (new in Android O).
     */
    channel_id?: string;
    /**
     * Sets the "ticker" text, which is sent to accessibility services.
     */
    ticker?: string;
    /**
     * When set to false or unset, the notification is automatically dismissed when the user clicks it in the panel.
     */
    sticky?: boolean;
    /**
     * Set the time that the event in the notification occurred.
     */
    event_time?: string;
    /**
     * Set whether or not this notification is relevant only to the current device.
     */
    local_only?: boolean;
    /**
     * Set the relative priority for this notification.
     */
    notification_priority?: number;
    /**
     * If set to true, use the Android framework's default sound for the notification.
     */
    default_sound?: boolean;
    /**
     * If set to true, use the Android framework's default vibrate pattern for the notification.
     */
    default_vibrate_timings?: boolean;
    /**
     * If set to true, use the Android framework's default light settings for the notification.
     */
    default_light_settings?: boolean;
    /**
     * Set the vibration pattern to use.
     */
    vibrate_timings?: string[];
    /**
     * Set the Notification.visibility of the notification.
     */
    visibility?: number;
    /**
     * Sets the number of items this notification represents.
     */
    notification_count?: number;
    /**
     * Settings to control the notification's LED blinking rate and color if LED is available on the device.
     */
    light_settings?: {
        color: {
            red: number;
            green: number;
            blue: number;
            alpha: number;
        };
        light_on_duration: string;
        light_off_duration: string;
    };
    /**
     * Contains the URL of an image that is going to be displayed in a notification.
     */
    image?: string;
}

/**
 * Apple Push Notification Service specific options.
 */
export declare interface FirebaseV1ApnsConfig {
    /**
     * A collection of APNs headers.
     */
    headers?: Record<string, string>;
    /**
     * A collection of APNs headers.
     */
    payload?: AppleNativeMessage;
    /**
     * A collection of APNs headers.
     */
    fcm_options?: FirebaseV1ApnsFcmOptions;
}

/**
 * Options for features provided by the FCM SDK for iOS.
 */
export declare interface FirebaseV1ApnsFcmOptions {
    /**
     * Label associated with the message's analytics data.
     */
    analytics_label?: string;
    /**
     * Contains the URL of an image that is going to be displayed in a notification.
     */
    image?: string;
}

export declare interface FirebaseV1FcmOptions {
    /**
     * Label associated with the message's analytics data.
     */
    analytics_label?: string;
}

/**
 * Represents the targets, options, and payload for HTTP JSON messages for the Firebase V1 interface.
 */
export declare interface FirebaseV1NativeMessage {
    /**
     * Custom key-value pairs of the message's payload.
     */
    data?: Record<string, string>;
    /**
     * The predefined, user-visible key-value pairs of the notification payload.
     */
    notification?: FirebaseV1NativeNotification;
    /**
     * Android specific options for messages sent through FCM connection server.
     */
    android?: FirebaseV1AndroidConfig;
    /**
     * Webpush protocol options.
     */
    webpush?: FirebaseV1WebPushConfig;
    /**
     * APNs specific options.
     */
    apns?: FirebaseV1ApnsConfig;
    /**
     * FCM options.
     */
    fcm_options?: FirebaseV1FcmOptions;
    /**
     * Registration token to send a message to.
     */
    token?: string;
    /**
     * Topic name to send a message to, e.g. "weather".
     */
    topic?: string;
    /**
     * Condition to send a message to, e.g. "'foo' in topics && 'bar' in topics".
     */
    condition?: string;
}

/**
 * Represents the Firebase V1 native message envelope.
 */
export declare interface FirebaseV1NativeMessageEnvelope {
    /**
     * The Firebase V1 native message.
     */
    message: FirebaseV1NativeMessage;
}

/**
 * Represents a native FCM V1 notification message payload.
 */
export declare interface FirebaseV1NativeNotification {
    /**
     * The notification's title.
     */
    title?: string;
    /**
     * The notification's body text.
     */
    body?: string;
    /**
     * Contains the URL of an image that is going to be downloaded on the device and displayed in a notification.
     */
    image?: string;
}

/**
 * Describes an Firebase Legacy Registration channel query.
 */
export declare interface FirebaseV1RegistrationChannel {
    /**
     * The FCM V1 registration ID.
     */
    fcmV1RegistrationId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "fcmv1";
}

export declare interface FirebaseV1WebPushConfig {
    /**
     * A collection of WebPush protocol options.
     */
    headers?: Record<string, string>;
    /**
     * A collection of WebPush protocol options.
     */
    data?: Record<string, string>;
    /**
     * Web Notification options as a JSON object.
     */
    notification?: FirebaseV1WebPushNotification;
    /**
     * A collection of WebPush protocol options.
     */
    fcm_options?: FirebaseV1WebPushFcmOptions;
}

/**
 * Options for features provided by the FCM SDK for Web.
 */
export declare interface FirebaseV1WebPushFcmOptions {
    /**
     * The link to open when the user clicks on the notification.
     */
    link?: string;
    /**
     * Label associated with the message's analytics data.
     */
    analytics_label?: string;
}

/**
 * Represents a Web Push notification payload.
 */
export declare interface FirebaseV1WebPushNotification {
    /**
     * An array of actions to display in the notification.
     */
    actions?: {
        action?: string;
        title?: string;
        icon?: string;
    }[];
    /**
     * Defines a title for the notification.
     */
    title?: string;
    /**
     * The body string of the notification
     */
    body?: string;
    /**
     * A string containing the URL of an icon to be displayed in the notification.
     */
    icon?: string;
    /**
     * A string containing the URL of an image to represent the notification when there is not enough space to display the notification itself such as for example, the Android Notification Bar.
     */
    badge?: string;
    /**
     * The notification's data.
     */
    data?: Record<string, string>;
    /**
     * The direction in which to display the notification.
     */
    dir?: "auto" | "ltr" | "rtl";
    /**
     * A string containing the URL of an image to be displayed in the notification.
     */
    image?: string;
    /**
     * The notification's language.
     */
    lang?: string;
    /**
     * A boolean value specifying whether the user should be notified after a new notification replaces an old one.
     */
    renotify?: boolean;
    /**
     * Indicates that a notification should remain active until the user clicks or dismisses it, rather than closing automatically.
     */
    requireInteraction?: boolean;
    /**
     * A boolean value specifying whether the notification is silent
     */
    silent?: boolean;
    /**
     * A string representing an identifying tag for the notification.
     */
    tag?: string;
    /**
     * A number representing the time at which a notification is created or applicable
     */
    timestamp?: number;
    /**
     * A vibration pattern for the device's vibration hardware to emit with the notification.
     */
    vibrate?: number[];
}

/**
 * Represents Notification Hub registration description for Google Cloud Messaging.
 */
export declare interface GcmRegistrationDescription extends GcmRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Gcm";
}

/**
 * Represents Notification Hub registration description for Google Cloud Messaging.
 */
export declare interface GcmRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * Registration id obtained from the Google Cloud Messaging service.
     */
    gcmRegistrationId: string;
}

/**
 * Represents Notification Hub template registration description for Firebase Legacy Cloud Messaging.
 */
export declare interface GcmTemplateRegistrationDescription extends GcmTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "GcmTemplate";
}

/**
 * Represents Notification Hub template registration description for Firebase Legacy Cloud Messaging.
 */
export declare interface GcmTemplateRegistrationDescriptionCommon extends GcmRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

/**
 * Represents the types of installations available in Notification Hubs.
 */
export declare type Installation = AppleInstallation | AdmInstallation | BaiduInstallation | BrowserInstallation | FcmLegacyInstallation | FcmV1Installation | XiaomiInstallation | WindowsInstallation;

/**
 * Represents an installation for a device for Notification Hubs.
 */
export declare interface InstallationCommon {
    /**
     * The ID for the installation.
     */
    installationId: string;
    /**
     * The User ID for the installation used for targeting.
     */
    userId?: string;
    /**
     * The installation expiration time.
     */
    readonly expirationTime?: string;
    /**
     * The last update date of the installation.
     */
    readonly lastUpdate?: string;
    /**
     * The tags used for targeting this installation.
     */
    tags?: string[];
    /**
     * The templates for the installation.
     */
    templates?: Record<string, InstallationTemplate>;
}

/**
 * Represents an installation template.
 */
export declare interface InstallationTemplate {
    /**
     * The body for the installation template.
     */
    body: string;
    /**
     * Headers to include for the template send.
     */
    headers: Record<string, string>;
    /**
     * The tags to include for the template.
     */
    tags?: string[];
}

/**
 * Represents a JSON notification hub.
 */
export declare interface JsonNotification extends NotificationCommon {
    /**
     * The content type for the push notification.
     */
    contentType: "application/json;charset=utf-8";
}

/**
 * Represents a patch operation.
 */
export declare interface JsonPatch {
    /**
     * The patch operation.
     */
    op: JsonPatchOperation;
    /**
     * The path for the patch operation.
     */
    path: string;
    /**
     * The value to add or replace for the operation.
     */
    value?: string;
}

/**
 * Represents the JSON Patch types of add, remove and replace.
 */
export declare type JsonPatchOperation = "add" | "remove" | "replace";

/**
 * Represents a Windows Phone Notification Services registration description.
 * @deprecated Windows Phone is no longer supported.
 */
export declare interface MpnsRegistrationDescription extends MpnsRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Mpns";
}

/**
 * Represents a Windows Phone Notification Services registration description.
 * @deprecated Windows Phone is no longer supported.
 */
export declare interface MpnsRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The channel URI.
     */
    channelUri: string;
}

/**
 * Represents a Windows Phone Notification Services template registration.
 * @deprecated Windows Phone is no longer supported.
 */
export declare interface MpnsTemplateRegistrationDescription extends MpnsRegistrationDescriptionCommon, TemplateRegistrationDescription {
    /**
     * The WNS headers.
     */
    mpnsHeaders?: Record<string, string>;
    /**
     * The kind of the registration.
     */
    kind: "MpnsTemplate";
}

/**
 * Represents a Windows Phone Notification Services template registration.
 * @deprecated Windows Phone is no longer supported.
 */
export declare interface MpnsTemplateRegistrationDescription extends MpnsTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "MpnsTemplate";
}

/**
 * Represents a Windows Phone Notification Services template registration.
 * @deprecated Windows Phone is no longer supported.
 */
export declare interface MpnsTemplateRegistrationDescriptionCommon extends MpnsRegistrationDescriptionCommon, TemplateRegistrationDescription {
    /**
     * The WNS headers.
     */
    mpnsHeaders?: Record<string, string>;
}

/**
 * Represents the possible push notification messages types.
 */
export declare type Notification = AppleNotification | AdmNotification | BaiduNotification | BrowserNotification | FcmLegacyNotification | FcmV1Notification | XiaomiNotification | WindowsNotification | TemplateNotification;

/**
 * Represents a notification that can be sent to a device.
 */
export declare interface NotificationCommon {
    /**
     * The body for the push notification.
     */
    body: string;
    /**
     * The headers to include for the push notification.
     */
    headers?: Record<string, unknown>;
}

/**
 * The common notification parameters to accept a string body or JSON body.
 */
export declare interface NotificationCommonParams {
    /**
     * The body for the push notification.
     */
    body: string | unknown;
    /**
     * The headers to include for the push notification.
     */
    headers?: Record<string, unknown>;
}

/**
 * Represents Notification details.
 */
export declare interface NotificationDetails {
    /**
     * The unique notification identifier.
     */
    notificationId?: string;
    /**
     * The notification location.
     */
    location?: string;
    /**
     * The notification state.
     */
    state?: NotificationOutcomeState;
    /**
     * The enqueue time of the notification.
     */
    enqueueTime?: Date;
    /**
     * The notification send start time.
     */
    startTime?: Date;
    /**
     * The notification send end time.
     */
    endTime?: Date;
    /**
     * The notification body.
     */
    notificationBody?: string;
    /**
     * The notification tags.
     */
    tags?: string;
    /**
     * The notification platforms targeted.
     */
    targetPlatforms?: string;
    /**
     * The URL for the platform notification services errors.
     */
    pnsErrorDetailsUrl?: string;
    /**
     * APNs outcomes counts per state.
     */
    apnsOutcomeCounts?: NotificationOutcome[];
    /**
     * WNS outcomes counts per state.
     */
    wnsOutcomeCounts?: NotificationOutcome[];
    /**
     * FCM outcome counts per state.
     */
    fcmOutcomeCounts?: NotificationOutcome[];
    /**
     * FCM V1 outcome counts per state.
     */
    fcmV1OutcomeCounts?: NotificationOutcome[];
    /**
     * ADM outcome counts per state.
     */
    admOutcomeCounts?: NotificationOutcome[];
    /**
     * Baidu outcome counts per state.
     */
    baiduOutcomeCounts?: NotificationOutcome[];
    /**
     * Web Push outcome counts per state.
     */
    browserOutcomeCounts?: NotificationOutcome[];
    /**
     * Xiaomi outcome counts per state.
     */
    xiaomiOutcomeCounts?: NotificationOutcome[];
}

/**
 * Represents a Notification Hub Job.
 */
export declare interface NotificationHubJob {
    /**
     * The unique job identifier.
     */
    jobId?: string;
    /**
     * The output file name.
     */
    outputFileName?: string;
    /**
     * The file name for the job failures.
     */
    failuresFileName?: string;
    /**
     * The progress for the job.
     */
    progress?: number;
    /**
     * The type of job.
     */
    type: NotificationHubJobType;
    /**
     * The status of the job.
     */
    status?: NotificationHubJobStatus;
    /**
     * The output container URL.
     */
    outputContainerUrl: string;
    /**
     * The import file URL.
     */
    importFileUrl?: string;
    /**
     * The input properties for the notification hub job.
     */
    inputProperties?: Record<string, string>;
    /**
     * Gets the notification hub job failure message.
     */
    failure?: string;
    /**
     * The output properties for the notification hub job.
     */
    outputProperties?: Record<string, string>;
    /**
     * Notification hub job created date.
     */
    createdAt?: Date;
    /**
     * Notification hub job last updated date.
     */
    updatedAt?: Date;
}

/**
 * Describes a poller for NotificationHubJob types.
 */
export declare type NotificationHubJobPoller = SimplePollerLike<OperationState<NotificationHubJob>, NotificationHubJob>;

/**
 * Describes the types of notification hub job statuses.
 */
export declare type NotificationHubJobStatus = 
/**
* Indicates that the NotificationHubJob was accepted.
*/
"Started"
/**
* Indicates that the NotificationHubJob is currently running. Depending on the amount of data,
* a job may stay in this state for several hours.
*/
| "Running"
/**
* Indicates that the NotificationHubJob was completed successfully. Any output
* will be ready where configured via the NotificationHubJob object.
*/
| "Completed"
/**
* Indicates that the NotificationHubJob has failed.
*/
| "Failed";

/**
 * Describes the types of notification hub jobs.
 */
export declare type NotificationHubJobType = 
/**
* Job type to bulk get registrations.
*/
"ExportRegistrations"
/**
* Job type to bulk create registrations.
*/
| "ImportCreateRegistrations"
/**
* Job type to bulk update registrations.
*/
| "ImportUpdateRegistrations"
/**
* Job type to bulk delete registrations.
*/
| "ImportDeleteRegistrations"
/**
* Job type to bulk upsert registrations.
*/
| "ImportUpsertRegistrations";

/**
 * This represents a client for Azure Notification Hubs to manage installations and send
 * messages to devices.
 */
export declare class NotificationHubsClient {
    private _client;
    /**
     * Creates a new instance of the NotificationClient with a connection string, hub name and options.
     * @param connectionString - The Notification Hub Access Policy connection string.
     * @param hubName - The name of the Azure Notification Hub.
     * @param options - Options for configuring the Azure Notification Hubs client.
     */
    constructor(connectionString: string, hubName: string, options?: NotificationHubsClientOptions);
    /**
     * Creates or overwrites an installation to a Notification Hub.
     * @param installation - The installation to create or overwrite.
     * @param options - Configuration options for the create or update installation operation.
     * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
     */
    createOrUpdateInstallation(installation: Installation, options?: OperationOptions): Promise<NotificationHubsResponse>;
    /**
     * Deletes an installation from a Notification Hub.
     * @param installationId - The installation ID of the installation to delete.
     * @param options - Configuration options for the installation delete operation.
     * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
     */
    deleteInstallation(installationId: string, options?: OperationOptions): Promise<NotificationHubsResponse>;
    /**
     * Gets an Azure Notification Hub installation by the installation ID.
     * @param installationId - The ID of the installation to get.
     * @param options - Configuration options for the get installation operation.
     * @returns The installation that matches the installation ID.
     */
    getInstallation(installationId: string, options?: OperationOptions): Promise<Installation>;
    /**
     * Updates an installation using the JSON-Patch standard in RFC6902.
     * @param installationId - The ID of the installation to update.
     * @param patches - An array of patches following the JSON-Patch standard.
     * @param options - Configuration options for the patch installation operation.
     * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
     */
    updateInstallation(installationId: string, patches: JsonPatch[], options?: OperationOptions): Promise<NotificationHubsResponse>;
    /**
     * Creates a new registration ID.
     * @param options - The options for creating a new registration ID.
     * @returns The newly created registration ID.
     */
    createRegistrationId(options?: OperationOptions): Promise<string>;
    /**
     * Creates a new registration. This method generates a registration ID,
     * which you can subsequently use to retrieve, update, and delete this registration.
     * @param registration - The registration to create.
     * @param options - Options for creating a new registration.
     * @returns The newly created registration description.
     */
    createRegistration(registration: RegistrationDescription, options?: OperationOptions): Promise<RegistrationDescription>;
    /**
     * Creates or updates a registration.
     * @param registration - The registration to create or update.
     * @param options - The operation options.
     * @returns The created or updated registration description.
     */
    createOrUpdateRegistration(registration: RegistrationDescription, options?: OperationOptions): Promise<RegistrationDescription>;
    /**
     * Updates an existing registration.
     * @param registration - The registration to update.
     * @param options - The operation options.
     * @returns The updated registration description.
     */
    updateRegistration(registration: RegistrationDescription, options?: OperationOptions): Promise<RegistrationDescription>;
    /**
     * Deletes a registration with the given registration ID.
     * @param context - The Notification Hubs client.
     * @param registrationId - The registration ID of the registration to delete.
     * @param options - The options for delete operations including the ETag
     * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
     */
    deleteRegistration(registrationId: string, options?: EntityOperationOptions): Promise<NotificationHubsResponse>;
    /**
     * Gets a registration by the given registration ID.
     * @param registrationId - The ID of the registration to get.
     * @param options - The options for getting a registration by ID.
     * @returns A RegistrationDescription that has the given registration ID.
     */
    getRegistration(registrationId: string, options?: OperationOptions): Promise<RegistrationDescription>;
    /**
     * Gets all registrations for the notification hub with the given query options.
     * @param options - The options for querying the registrations such as $top.
     * @returns A paged async iterable containing all of the registrations for the notification hub.
     */
    listRegistrations(options?: RegistrationQueryLimitOptions): PagedAsyncIterableIterator<RegistrationDescription>;
    /**
     * Gets all registrations for the notification hub with the given device information and options.
     * @param channel - The registration channel information to query per PNS type.
     * @param options - The options for querying the registrations such as $top.
     * @returns A paged async iterable containing all of the registrations for the notification hub.
     */
    listRegistrationsByChannel(channel: RegistrationChannel, options?: RegistrationQueryLimitOptions): PagedAsyncIterableIterator<RegistrationDescription>;
    /**
     * Lists all registrations with the matching tag.
     * @param tag - The tag to query for matching registrations.
     * @param options - The query options such as $top.
     * @returns A paged async iterable containing the matching registrations for the notification hub.
     */
    listRegistrationsByTag(tag: string, options?: RegistrationQueryLimitOptions): PagedAsyncIterableIterator<RegistrationDescription>;
    /**
     * Sends push notifications to devices that match the given tags or tag expression.
     * @param notification - The notification to send to the matching devices.
     * @param options - Options for the notification including tags, device handles and whether to enable test send.
     * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
     */
    sendNotification(notification: Notification, options?: DirectSendNotificationOptions | SendNotificationOptions): Promise<NotificationHubsMessageResponse>;
    /**
     * Schedules a push notification to devices that match the given tags or tag expression at the specified time.
     * NOTE: This is only available in Standard SKU Azure Notification Hubs.
     * @param scheduledTime - The Date to send the push notification.
     * @param notification - The notification to send to the matching devices.
     * @param options - Options which include tags used to target the device for push notifications in either an array or tag expression.
     * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.
     */
    scheduleNotification(scheduledTime: Date, notification: Notification, options?: ScheduleNotificationOptions): Promise<NotificationHubsMessageResponse>;
    /**
     * Cancels the scheduled notification with the given notification ID.
     * @param notificationId - The notification ID from the scheduled notification.
     * @param options - The operation options.
     * @returns A notification hub response with correlation ID and tracking ID.
     */
    cancelScheduledNotification(notificationId: string, options?: OperationOptions): Promise<NotificationHubsResponse>;
    /**
     * Retrieves an Azure Storage container URL. The container has feedback data for the notification hub.
     * The caller can then use the Azure Storage Services SDK to retrieve the contents of the container.
     * @param options - The options for getting the push notification feedback container URL.
     * @returns The URL of the Azure Storage Container containing the feedback data.
     */
    getFeedbackContainerUrl(options?: OperationOptions): Promise<string>;
    /**
     * Retrieves the results of a send operation. This can retrieve intermediate results if the send is being processed
     * or final results if the Send* has completed. This API can only be called for Standard SKU and above.
     * @param notificationId - The notification ID returned from the send operation.
     * @param options - The operation options.
     * @returns The results of the send operation.
     */
    getNotificationOutcomeDetails(notificationId: string, options?: OperationOptions): Promise<NotificationDetails>;
    /**
     * Gets a Notification Hub Job by the ID.
     * @param jobId - The Notification Hub Job ID.
     * @param options - The operation options.
     * @returns The Notification Hub Job with the matching ID.
     */
    getNotificationHubJob(jobId: string, options?: OperationOptions): Promise<NotificationHubJob>;
    /**
     * Submits a Notification Hub job and creates a poller to poll for results.
     * @param notificationHubJob - The Notification Hub import/export job to start.
     * @param options - The operation options.
     * @returns A poller which can be called to poll until completion of the job.
     */
    beginSubmitNotificationHubJob(notificationHubJob: NotificationHubJob, options?: PolledOperationOptions): Promise<NotificationHubJobPoller>;
    /**
     * Submits a Notification Hub Job.  Note this is available to Standard SKU namespace and above.
     * @param job - The notification hub job to submit.
     * @param options - The operation options.
     * @returns The notification hub job details including job ID and status.
     */
    submitNotificationHubJob(job: NotificationHubJob, options?: OperationOptions): Promise<NotificationHubJob>;
    /**
     * Gets all Notification Hub Jobs for this Notification Hub.
     * @param options - The operation options.
     * @returns An array of all Notification Hub Jobs for this Notification Hub.
     */
    listNotificationHubJobs(options?: OperationOptions): Promise<NotificationHubJob[]>;
}

/**
 * Describes the options that can be provided while creating the NotificationHubsClientContext.
 */
export declare interface NotificationHubsClientOptions extends ClientOptions {
}

/**
 * Describes a response from the Notification Hubs service for send operations.
 */
export declare interface NotificationHubsMessageResponse extends NotificationHubsResponse {
    /**
     * The notification ID from the operation.  Note this is only available in Standard SKU and above.
     */
    notificationId?: string;
    /**
     * The number of devices that successfully received the notification.
     */
    successCount: number;
    /**
     * The number of devices that failed to receive a notification.
     */
    failureCount: number;
    /**
     * The list of notification outcome results for each device registered with the hub, to which this notification was sent.
     */
    results: RegistrationResult[];
    /**
     * The state of this notification outcome.
     */
    state: NotificationOutcomeState;
}

/**
 * Describes a response from the Notification Hubs which includes a tracking ID, correlation ID and location.
 */
export declare interface NotificationHubsResponse {
    /**
     * The Tracking ID of the operation.
     */
    trackingId?: string;
    /**
     * The correlation ID of the operation.
     */
    correlationId?: string;
    /**
     * The location of the operation.
     */
    location?: string;
}

/**
 * The per platform count per state.
 */
export declare interface NotificationOutcome {
    /**
     * The state of the notification.
     */
    state: string;
    /**
     * The count of notifications per state.
     */
    count: number;
}

/**
 * Represents the notification outcome states.
 */
export declare type NotificationOutcomeState = "Enqueued" | "DetailedStateAvailable" | "Processing" | "Completed" | "Abandoned" | "Unknown" | "NoTargetFound" | "Cancelled";

/**
 * Options for polled operations including the polling interval cycle.
 */
export declare interface PolledOperationOptions extends OperationOptions {
    /**
     * Time delay between poll requests, in milliseconds.
     */
    updateIntervalInMs?: number;
}

/**
 * Represents the types of push channels available for Notification Hubs.
 */
export declare type PushHandle = BrowserPushChannel | string;

/**
 * Describes a Registration query.
 */
export declare type RegistrationChannel = AdmRegistrationChannel | AppleRegistrationChannel | BaiduRegistrationChannel | BrowserRegistrationChannel | FirebaseLegacyRegistrationChannel | FirebaseV1RegistrationChannel | XiaomiRegistrationChannel | WindowsRegistrationChannel;

/**
 * Describes the types of registration descriptions.
 */
export declare type RegistrationDescription = AdmRegistrationDescription | AdmTemplateRegistrationDescription | AppleRegistrationDescription | AppleTemplateRegistrationDescription | BaiduRegistrationDescription | BaiduTemplateRegistrationDescription | BrowserRegistrationDescription | BrowserTemplateRegistrationDescription | GcmRegistrationDescription | GcmTemplateRegistrationDescription | FcmV1RegistrationDescription | FcmV1TemplateRegistrationDescription | MpnsRegistrationDescription | MpnsTemplateRegistrationDescription | XiaomiRegistrationDescription | XiaomiTemplateRegistrationDescription | WindowsRegistrationDescription | WindowsTemplateRegistrationDescription;

/**
 * Represents a registration description.
 */
export declare interface RegistrationDescriptionCommon {
    /**
     * The registration ID.
     */
    registrationId?: string;
    /**
     * The expiration time of the registration.
     */
    expirationTime?: Date;
    /**
     * The ETag associated with this description.
     */
    etag?: string;
    /**
     * The tags associated with the registration.
     */
    tags?: string[];
    /**
     * A dictionary of push variables associated with property bag.
     */
    pushVariables?: Record<string, string>;
}

/**
 * Represents query options to include $top support.
 */
export declare interface RegistrationQueryLimitOptions extends OperationOptions {
    /**
     * The $top query member to get a number of records.
     */
    top?: number;
}

/**
 * Represents query options to include both $top and $filter.
 */
export declare interface RegistrationQueryOptions extends RegistrationQueryLimitOptions {
    /**
     * The OData $filter operator query string.
     */
    filter?: string;
}

/**
 * Describes a registration query response with registrations and a continuation token.
 */
export declare interface RegistrationQueryResponse {
    /**
     * The list of registrations.
     */
    registrations: RegistrationDescription[];
    /**
     * A continuation token to get more results.
     */
    continuationToken?: string;
}

/**
 * Represents the result of the registration.
 */
export declare interface RegistrationResult {
    /**
     * The application platform.
     */
    applicationPlatform: string;
    /**
     * The PNS handle.
     */
    pnsHandle: string;
    /**
     * The registration ID.
     */
    registrationId: string;
    /**
     * The outcome of the registration.
     */
    outcome: string;
}

/**
 * Represents the types of registration descriptions.
 */
export declare type RegistrationType = "Adm" | "AdmTemplate" | "Apple" | "AppleTemplate" | "Baidu" | "BaiduTemplate" | "Browser" | "BrowserTemplate" | "Gcm" | "GcmTemplate" | "FcmV1" | "FcmV1Template" | "Mpns" | "MpnsTemplate" | "Xiaomi" | "XiaomiTemplate" | "Windows" | "WindowsTemplate";

/**
 * Options for sending notifications for both tag based send and broadcast scheduled send.
 */
export declare interface ScheduleNotificationOptions extends OperationOptions {
    /**
     * A tag expression used to target devices. Use the `createTagExpression` function to create a tag expression from an array of tags.
     * If not set, this results in a broadcast notification to be scheduled.
     */
    tagExpression?: string;
}

/**
 * Options for sending notifications for both tag based send and broadcast send.
 */
export declare interface SendNotificationOptions extends OperationOptions {
    /**
     * A tag expression used to target devices. Use the `createTagExpression` function to create a tag expression from an array of tags.
     * If not set, this results in a broadcast notification to be sent.
     */
    tagExpression?: string;
    /**
     * Set to true to enable test send.
     */
    enableTestSend?: boolean;
}

/**
 * Represents a template based push notification.
 */
export declare interface TemplateNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "template";
}

/**
 * Represents the description of a template registration.
 */
export declare interface TemplateRegistrationDescription {
    /**
     * The body template.
     */
    bodyTemplate: string;
    /**
     * The name of the template.
     */
    templateName?: string;
}

/**
 * Represents the types of Windows Badge Glyphs
 */
export declare type WindowsBadgeGlyphType = "none" | "activity" | "alarm" | "alert" | "attention" | "available" | "away" | "busy" | "error" | "newMessage" | "paused" | "playing" | "unavailable";

/**
 * Represents the Windows Badge Message
 */
export declare interface WindowsBadgeNativeMessage {
    /**
     * Either a numeric value or a string value that specifies a predefined badge glyph.
     */
    value: WindowsBadgeGlyphType | number;
}

/**
 * Represents the possible WNS content-types.
 */
export declare type WindowsContentType = "application/xml" | "application/octet-stream";

/**
 * List of WNS specific headers.
 */
export declare interface WindowsHeaders extends Record<string, unknown> {
    /**
     * The header specifies whether this is a tile, toast, badge, or raw notification.
     */
    "X-WNS-Type"?: WnsTypes;
}

/**
 * Represents a Windows Notification Services (WNS) based installation.
 */
export declare interface WindowsInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "wns";
}

/**
 * Represents a Windows Notification Services (WNS) push notification.
 */
export declare interface WindowsNotification extends NotificationCommon {
    /**
     * The platform for the push notification.
     */
    platform: "windows";
    /**
     * The content type for the push notification.
     */
    contentType: WindowsContentType;
}

/**
 * Describes an Windows Notification Services Registration channel query.
 */
export declare interface WindowsRegistrationChannel {
    /**
     * The WNS Channel URI.
     */
    channelUri: string;
    /**
     * The kind of the registration channel.
     */
    kind: "windows";
}

/**
 * Represents a Windows Notification Services (WNS) registration description.
 */
export declare interface WindowsRegistrationDescription extends WindowsRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Windows";
}

/**
 * Represents a Windows Notification Services (WNS) registration description.
 */
export declare interface WindowsRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The channel URI.
     */
    channelUri: string;
}

/**
 * Represents a Windows Notification Services (WNS) template registration.
 */
export declare interface WindowsTemplateRegistrationDescription extends WindowsTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "WindowsTemplate";
}

/**
 * Represents a Windows Notification Services (WNS) template registration.
 */
export declare interface WindowsTemplateRegistrationDescriptionCommon extends WindowsRegistrationDescriptionCommon, TemplateRegistrationDescription {
    /**
     * The WNS headers.
     */
    wnsHeaders?: Record<string, string>;
}

/**
 * Represents a WNS notification that can be sent to a device.
 */
export declare interface WnsNotificationParams {
    /**
     * The body for the push notification.
     */
    body: string;
    /**
     * The headers to include for the push notification.
     */
    headers?: WindowsHeaders;
}

/**
 * The list of WNS specific types.
 */
export declare type WnsTypes = "wns/toast" | "wns/badge" | "wns/tile" | "wns/raw";

/**
 * Represents a Xiaomi based installation.
 */
export declare interface XiaomiInstallation extends DeviceTokenInstallation {
    /**
     * The platform for the installation.
     */
    platform: "xiaomi";
}

/**
 * Represents a Xiaomi push notification.
 */
export declare interface XiaomiNotification extends JsonNotification {
    /**
     * The platform for the push notification.
     */
    platform: "xiaomi";
}

/**
 * Describes an Xiaomi Registration channel query.
 */
export declare interface XiaomiRegistrationChannel {
    /**
     * The Xiaomi registration ID.
     */
    xiaomiRegistrationId: string;
    /**
     * The kind of the registration channel.
     */
    kind: "xiaomi";
}

/**
 * Represents a Xiaomi registration description.
 */
export declare interface XiaomiRegistrationDescription extends XiaomiRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "Xiaomi";
}

/**
 * Represents a Xiaomi registration description.
 */
export declare interface XiaomiRegistrationDescriptionCommon extends RegistrationDescriptionCommon {
    /**
     * The Xiaomi registration ID.
     */
    xiaomiRegistrationId: string;
}

/**
 * Represents a Windows Notification Services (WNS) template registration.
 */
export declare interface XiaomiTemplateRegistrationDescription extends XiaomiTemplateRegistrationDescriptionCommon {
    /**
     * The kind of the registration.
     */
    kind: "XiaomiTemplate";
}

/**
 * Represents a Xiaomi template registration.
 */
export declare interface XiaomiTemplateRegistrationDescriptionCommon extends XiaomiRegistrationDescriptionCommon, TemplateRegistrationDescription {
}

export { }
