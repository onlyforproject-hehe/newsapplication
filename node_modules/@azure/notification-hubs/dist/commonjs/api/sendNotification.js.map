{"version":3,"file":"sendNotification.js","sourceRoot":"","sources":["../../../src/api/sendNotification.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DirectSendNotificationOptions, SendNotificationOptions } from \"../models/options.js\";\nimport { createRequest, parseNotificationSendResponse, sendRequest } from \"./internal/_client.js\";\nimport {\n  isDirectSendNotificationOptions,\n  isSendNotificationOptions,\n} from \"../utils/optionUtils.js\";\nimport { BrowserPushChannel } from \"../models/installation.js\";\nimport { NonNullableRecord } from \"../utils/utils.js\";\nimport { Notification } from \"../models/notification.js\";\nimport { NotificationHubsClientContext } from \"./index.js\";\nimport { NotificationHubsMessageResponse } from \"../models/notificationDetails.js\";\nimport { createMultipartDirectNotification } from \"../utils/notificationUtils.js\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { tracingClient } from \"../utils/tracing.js\";\n\n/**\n * Sends push notifications to devices that match the given tags or tag expression.\n * @param context - The Notification Hubs client.\n * @param notification - The notification to send to the matching devices.\n * @param options - Options for the notification including tags, device handles and whether to enable test send.\n * @returns A NotificationHubResponse with the tracking ID, correlation ID and location.\n */\nexport function sendNotification(\n  context: NotificationHubsClientContext,\n  notification: Notification,\n  options: DirectSendNotificationOptions | SendNotificationOptions = { enableTestSend: false },\n): Promise<NotificationHubsMessageResponse> {\n  return tracingClient.withSpan(\n    `NotificationHubsClientContext.sendNotification`,\n    options,\n    async (updatedOptions) => {\n      const endpoint = context.requestUrl();\n      endpoint.pathname += \"/messages/\";\n\n      // Check if batch direct send\n      if (isDirectSendNotificationOptions(options) && Array.isArray(options.deviceHandle)) {\n        endpoint.pathname += \"$batch\";\n      }\n\n      // Check for test send\n      if (isSendNotificationOptions(options) && options.enableTestSend) {\n        endpoint.searchParams.append(\"test\", \"true\");\n      }\n\n      const headers = await context.createHeaders(\n        \"sendNotification\",\n        notification.headers as NonNullableRecord,\n      );\n      headers.set(\"ServiceBusNotification-Format\", notification.platform);\n\n      let body = notification.body;\n      let contentType: string = notification.contentType;\n\n      // Check for direct batch send\n      if (isDirectSendNotificationOptions(options) && Array.isArray(options.deviceHandle)) {\n        endpoint.searchParams.append(\"direct\", \"true\");\n        const boundary = `nh-boundary-${randomUUID()}`;\n        contentType = `multipart/mixed; boundary = \"${boundary}\"`;\n        body = createMultipartDirectNotification(boundary, notification, options.deviceHandle);\n      } else if (isDirectSendNotificationOptions(options)) {\n        endpoint.searchParams.append(\"direct\", \"true\");\n\n        if (notification.platform === \"browser\") {\n          const browserHandle = options.deviceHandle as BrowserPushChannel;\n          headers.set(\"ServiceBusNotification-DeviceHandle\", browserHandle.endpoint);\n          headers.set(\"Auth\", browserHandle.auth);\n          headers.set(\"P256DH\", browserHandle.p256dh);\n        } else {\n          headers.set(\"ServiceBusNotification-DeviceHandle\", options.deviceHandle as string);\n        }\n      } else if (isSendNotificationOptions(options)) {\n        if (options.tagExpression) {\n          headers.set(\"ServiceBusNotification-Tags\", options.tagExpression);\n        }\n      }\n\n      headers.set(\"Content-Type\", contentType);\n      headers.set(\"ServiceBusNotification-Format\", notification.platform);\n\n      const request = createRequest(endpoint, \"POST\", headers, updatedOptions);\n      request.body = body;\n\n      const response = await sendRequest(context, request, 201);\n\n      return parseNotificationSendResponse(response);\n    },\n  );\n}\n"]}